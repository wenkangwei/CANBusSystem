
IAR_STM32F103ZE_FreeRTOS_Simple_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000231c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08002500  08002500  00012500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08002504  08002504  00012504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000008  20000000  08002508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00001df4  20000008  08002510  00020008  2**3
                  ALLOC
  6 ._user_heap_stack 00000200  20001dfc  08002510  00021dfc  2**0
                  ALLOC
  7 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  8 .debug_info   00004e50  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000f74  00000000  00000000  00024e81  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000478  00000000  00000000  00025df8  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003e0  00000000  00000000  00026270  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00001dc8  00000000  00000000  00026650  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001a69  00000000  00000000  00028418  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      0000007c  00000000  00000000  00029e81  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00001068  00000000  00000000  00029f00  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .stabstr      0000003f  00000000  00000000  0002af68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000008 	.word	0x20000008
 8000200:	00000000 	.word	0x00000000
 8000204:	080024e8 	.word	0x080024e8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000000c 	.word	0x2000000c
 8000220:	080024e8 	.word	0x080024e8

08000224 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	f103 0208 	add.w	r2, r3, #8
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800023c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f103 0208 	add.w	r2, r3, #8
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	f103 0208 	add.w	r2, r3, #8
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	2200      	movs	r2, #0
 8000256:	601a      	str	r2, [r3, #0]
}
 8000258:	bf00      	nop
 800025a:	370c      	adds	r7, #12
 800025c:	46bd      	mov	sp, r7
 800025e:	bc80      	pop	{r7}
 8000260:	4770      	bx	lr

08000262 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
 8000262:	b480      	push	{r7}
 8000264:	b083      	sub	sp, #12
 8000266:	af00      	add	r7, sp, #0
 8000268:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	2200      	movs	r2, #0
 800026e:	611a      	str	r2, [r3, #16]
}
 8000270:	bf00      	nop
 8000272:	370c      	adds	r7, #12
 8000274:	46bd      	mov	sp, r7
 8000276:	bc80      	pop	{r7}
 8000278:	4770      	bx	lr

0800027a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 800027a:	b480      	push	{r7}
 800027c:	b085      	sub	sp, #20
 800027e:	af00      	add	r7, sp, #0
 8000280:	6078      	str	r0, [r7, #4]
 8000282:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	685b      	ldr	r3, [r3, #4]
 8000288:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	685a      	ldr	r2, [r3, #4]
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	685a      	ldr	r2, [r3, #4]
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	683a      	ldr	r2, [r7, #0]
 80002a0:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	683a      	ldr	r2, [r7, #0]
 80002a6:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	683a      	ldr	r2, [r7, #0]
 80002ac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	687a      	ldr	r2, [r7, #4]
 80002b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	1c5a      	adds	r2, r3, #1
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	601a      	str	r2, [r3, #0]
}
 80002be:	bf00      	nop
 80002c0:	3714      	adds	r7, #20
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bc80      	pop	{r7}
 80002c6:	4770      	bx	lr

080002c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 80002c8:	b480      	push	{r7}
 80002ca:	b085      	sub	sp, #20
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
 80002d0:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 80002d2:	683b      	ldr	r3, [r7, #0]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80002d8:	68bb      	ldr	r3, [r7, #8]
 80002da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80002de:	d103      	bne.n	80002e8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	691b      	ldr	r3, [r3, #16]
 80002e4:	60fb      	str	r3, [r7, #12]
 80002e6:	e00c      	b.n	8000302 <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	3308      	adds	r3, #8
 80002ec:	60fb      	str	r3, [r7, #12]
 80002ee:	e002      	b.n	80002f6 <vListInsert+0x2e>
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	685b      	ldr	r3, [r3, #4]
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	685b      	ldr	r3, [r3, #4]
 80002fa:	681a      	ldr	r2, [r3, #0]
 80002fc:	68bb      	ldr	r3, [r7, #8]
 80002fe:	429a      	cmp	r2, r3
 8000300:	d9f6      	bls.n	80002f0 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	685a      	ldr	r2, [r3, #4]
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	685b      	ldr	r3, [r3, #4]
 800030e:	683a      	ldr	r2, [r7, #0]
 8000310:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	68fa      	ldr	r2, [r7, #12]
 8000316:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	683a      	ldr	r2, [r7, #0]
 800031c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	687a      	ldr	r2, [r7, #4]
 8000322:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	1c5a      	adds	r2, r3, #1
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	601a      	str	r2, [r3, #0]
}
 800032e:	bf00      	nop
 8000330:	3714      	adds	r7, #20
 8000332:	46bd      	mov	sp, r7
 8000334:	bc80      	pop	{r7}
 8000336:	4770      	bx	lr

08000338 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 8000338:	b480      	push	{r7}
 800033a:	b085      	sub	sp, #20
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	685b      	ldr	r3, [r3, #4]
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	6892      	ldr	r2, [r2, #8]
 8000348:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	689b      	ldr	r3, [r3, #8]
 800034e:	687a      	ldr	r2, [r7, #4]
 8000350:	6852      	ldr	r2, [r2, #4]
 8000352:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	691b      	ldr	r3, [r3, #16]
 8000358:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	685a      	ldr	r2, [r3, #4]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	429a      	cmp	r2, r3
 8000362:	d103      	bne.n	800036c <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	689a      	ldr	r2, [r3, #8]
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	2200      	movs	r2, #0
 8000370:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	1e5a      	subs	r2, r3, #1
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	601a      	str	r2, [r3, #0]
}
 800037c:	bf00      	nop
 800037e:	3714      	adds	r7, #20
 8000380:	46bd      	mov	sp, r7
 8000382:	bc80      	pop	{r7}
 8000384:	4770      	bx	lr

08000386 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
 8000386:	b480      	push	{r7}
 8000388:	b085      	sub	sp, #20
 800038a:	af00      	add	r7, sp, #0
 800038c:	60f8      	str	r0, [r7, #12]
 800038e:	60b9      	str	r1, [r7, #8]
 8000390:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	3b04      	subs	r3, #4
 8000396:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800039e:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	3b04      	subs	r3, #4
 80003a4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 80003a6:	68ba      	ldr	r2, [r7, #8]
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	3b04      	subs	r3, #4
 80003b0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	3b14      	subs	r3, #20
 80003bc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 80003be:	687a      	ldr	r2, [r7, #4]
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	3b20      	subs	r3, #32
 80003c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80003ca:	68fb      	ldr	r3, [r7, #12]
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	3714      	adds	r7, #20
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bc80      	pop	{r7}
 80003d4:	4770      	bx	lr
	...

080003d8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80003d8:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <pxCurrentTCBConst2>)
 80003da:	6819      	ldr	r1, [r3, #0]
 80003dc:	6808      	ldr	r0, [r1, #0]
 80003de:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80003e2:	f380 8809 	msr	PSP, r0
 80003e6:	f04f 0000 	mov.w	r0, #0
 80003ea:	f380 8811 	msr	BASEPRI, r0
 80003ee:	f04e 0e0d 	orr.w	lr, lr, #13
 80003f2:	4770      	bx	lr

080003f4 <pxCurrentTCBConst2>:
 80003f4:	20001c2c 	.word	0x20001c2c
					"	bx r14							\n"
					"									\n"
					"	.align 2						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80003f8:	bf00      	nop
 80003fa:	bf00      	nop

080003fc <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80003fc:	4804      	ldr	r0, [pc, #16]	; (8000410 <prvPortStartFirstTask+0x14>)
 80003fe:	6800      	ldr	r0, [r0, #0]
 8000400:	6800      	ldr	r0, [r0, #0]
 8000402:	f380 8808 	msr	MSP, r0
 8000406:	b662      	cpsie	i
 8000408:	df00      	svc	0
 800040a:	bf00      	nop
					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
					" cpsie i				\n" /* Globally enable interrupts. */
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800040c:	bf00      	nop
 800040e:	0000      	.short	0x0000
 8000410:	e000ed08 	.word	0xe000ed08

08000414 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8000418:	4a0a      	ldr	r2, [pc, #40]	; (8000444 <xPortStartScheduler+0x30>)
 800041a:	4b0a      	ldr	r3, [pc, #40]	; (8000444 <xPortStartScheduler+0x30>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000422:	6013      	str	r3, [r2, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8000424:	4a07      	ldr	r2, [pc, #28]	; (8000444 <xPortStartScheduler+0x30>)
 8000426:	4b07      	ldr	r3, [pc, #28]	; (8000444 <xPortStartScheduler+0x30>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800042e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8000430:	f000 f87a 	bl	8000528 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8000434:	4b04      	ldr	r3, [pc, #16]	; (8000448 <xPortStartScheduler+0x34>)
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800043a:	f7ff ffdf 	bl	80003fc <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
 800043e:	2300      	movs	r3, #0
}
 8000440:	4618      	mov	r0, r3
 8000442:	bd80      	pop	{r7, pc}
 8000444:	e000ed20 	.word	0xe000ed20
 8000448:	20000000 	.word	0x20000000

0800044c <vPortYieldFromISR>:
	is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8000450:	4b03      	ldr	r3, [pc, #12]	; (8000460 <vPortYieldFromISR+0x14>)
 8000452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000456:	601a      	str	r2, [r3, #0]
}
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr
 8000460:	e000ed04 	.word	0xe000ed04

08000464 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8000468:	f04f 0050 	mov.w	r0, #80	; 0x50
 800046c:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
 8000470:	4b04      	ldr	r3, [pc, #16]	; (8000484 <vPortEnterCritical+0x20>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	3301      	adds	r3, #1
 8000476:	4a03      	ldr	r2, [pc, #12]	; (8000484 <vPortEnterCritical+0x20>)
 8000478:	6013      	str	r3, [r2, #0]
}
 800047a:	bf00      	nop
 800047c:	46bd      	mov	sp, r7
 800047e:	bc80      	pop	{r7}
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	20000000 	.word	0x20000000

08000488 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
 800048c:	4b08      	ldr	r3, [pc, #32]	; (80004b0 <vPortExitCritical+0x28>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	3b01      	subs	r3, #1
 8000492:	4a07      	ldr	r2, [pc, #28]	; (80004b0 <vPortExitCritical+0x28>)
 8000494:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000496:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <vPortExitCritical+0x28>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d103      	bne.n	80004a6 <vPortExitCritical+0x1e>
	{
		portENABLE_INTERRUPTS();
 800049e:	f04f 0000 	mov.w	r0, #0
 80004a2:	f380 8811 	msr	BASEPRI, r0
	}
}
 80004a6:	bf00      	nop
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bc80      	pop	{r7}
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	20000000 	.word	0x20000000

080004b4 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80004b4:	f3ef 8009 	mrs	r0, PSP
 80004b8:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <pxCurrentTCBConst>)
 80004ba:	681a      	ldr	r2, [r3, #0]
 80004bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80004c0:	6010      	str	r0, [r2, #0]
 80004c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80004c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80004ca:	f380 8811 	msr	BASEPRI, r0
 80004ce:	f000 fee9 	bl	80012a4 <vTaskSwitchContext>
 80004d2:	f04f 0000 	mov.w	r0, #0
 80004d6:	f380 8811 	msr	BASEPRI, r0
 80004da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80004de:	6819      	ldr	r1, [r3, #0]
 80004e0:	6808      	ldr	r0, [r1, #0]
 80004e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80004e6:	f380 8809 	msr	PSP, r0
 80004ea:	4770      	bx	lr

080004ec <pxCurrentTCBConst>:
 80004ec:	20001c2c 	.word	0x20001c2c
	"										\n"
	"	.align 2							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80004f0:	bf00      	nop
 80004f2:	bf00      	nop

080004f4 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80004fa:	4b0a      	ldr	r3, [pc, #40]	; (8000524 <SysTick_Handler+0x30>)
 80004fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000500:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8000502:	2300      	movs	r3, #0
 8000504:	607b      	str	r3, [r7, #4]
 8000506:	f04f 0050 	mov.w	r0, #80	; 0x50
 800050a:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
 800050e:	f000 fe21 	bl	8001154 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
 8000512:	f04f 0000 	mov.w	r0, #0
 8000516:	f380 8811 	msr	BASEPRI, r0
}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	e000ed04 	.word	0xe000ed04

08000528 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800052c:	4b04      	ldr	r3, [pc, #16]	; (8000540 <prvSetupTimerInterrupt+0x18>)
 800052e:	4a05      	ldr	r2, [pc, #20]	; (8000544 <prvSetupTimerInterrupt+0x1c>)
 8000530:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8000532:	4b05      	ldr	r3, [pc, #20]	; (8000548 <prvSetupTimerInterrupt+0x20>)
 8000534:	2207      	movs	r2, #7
 8000536:	601a      	str	r2, [r3, #0]
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr
 8000540:	e000e014 	.word	0xe000e014
 8000544:	0001193f 	.word	0x0001193f
 8000548:	e000e010 	.word	0xe000e010

0800054c <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL; 
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	f003 0307 	and.w	r3, r3, #7
 800055e:	2b00      	cmp	r3, #0
 8000560:	d004      	beq.n	800056c <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	f023 0307 	bic.w	r3, r3, #7
 8000568:	3308      	adds	r3, #8
 800056a:	607b      	str	r3, [r7, #4]
		}
	#endif

	vTaskSuspendAll();
 800056c:	f000 fd4e 	bl	800100c <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
 8000570:	4b12      	ldr	r3, [pc, #72]	; (80005bc <pvPortMalloc+0x70>)
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4413      	add	r3, r2
 8000578:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800057c:	d212      	bcs.n	80005a4 <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 800057e:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <pvPortMalloc+0x70>)
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	441a      	add	r2, r3
 8000586:	4b0d      	ldr	r3, [pc, #52]	; (80005bc <pvPortMalloc+0x70>)
 8000588:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
 800058a:	429a      	cmp	r2, r3
 800058c:	d90a      	bls.n	80005a4 <pvPortMalloc+0x58>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
 800058e:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <pvPortMalloc+0x70>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a0b      	ldr	r2, [pc, #44]	; (80005c0 <pvPortMalloc+0x74>)
 8000594:	4413      	add	r3, r2
 8000596:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;			
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <pvPortMalloc+0x70>)
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4413      	add	r3, r2
 80005a0:	4a06      	ldr	r2, [pc, #24]	; (80005bc <pvPortMalloc+0x70>)
 80005a2:	6013      	str	r3, [r2, #0]
		}	
	}
	xTaskResumeAll();
 80005a4:	f000 fd40 	bl	8001028 <xTaskResumeAll>
	
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d101      	bne.n	80005b2 <pvPortMalloc+0x66>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80005ae:	f001 fdff 	bl	80021b0 <vApplicationMallocFailedHook>
		}
	}
	#endif	

	return pvReturn;
 80005b2:	68fb      	ldr	r3, [r7, #12]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3710      	adds	r7, #16
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20001c28 	.word	0x20001c28
 80005c0:	20000028 	.word	0x20000028

080005c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bc80      	pop	{r7}
 80005d4:	4770      	bx	lr
	...

080005d8 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
 80005dc:	4b03      	ldr	r3, [pc, #12]	; (80005ec <xPortGetFreeHeapSize+0x14>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f5c3 53e0 	rsb	r3, r3, #7168	; 0x1c00
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr
 80005ec:	20001c28 	.word	0x20001c28

080005f0 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxQueue );
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d104      	bne.n	800060a <xQueueGenericReset+0x1a>
 8000600:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000604:	f380 8811 	msr	BASEPRI, r0
 8000608:	e7fe      	b.n	8000608 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 800060a:	f7ff ff2b 	bl	8000464 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000616:	6879      	ldr	r1, [r7, #4]
 8000618:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800061a:	fb01 f303 	mul.w	r3, r1, r3
 800061e:	441a      	add	r2, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2200      	movs	r2, #0
 8000628:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800063a:	3b01      	subs	r3, #1
 800063c:	6879      	ldr	r1, [r7, #4]
 800063e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000640:	fb01 f303 	mul.w	r3, r1, r3
 8000644:	441a      	add	r2, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000650:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000658:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d10e      	bne.n	800067e <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then 
			the tasks will remain blocked as after this function exits the queue 
			will still be empty.  If there are tasks blocked waiting to	write to 
			the queue, then one should be unblocked as after this function exits 
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	691b      	ldr	r3, [r3, #16]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d014      	beq.n	8000692 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	3310      	adds	r3, #16
 800066c:	4618      	mov	r0, r3
 800066e:	f000 fef3 	bl	8001458 <xTaskRemoveFromEventList>
 8000672:	4603      	mov	r3, r0
 8000674:	2b01      	cmp	r3, #1
 8000676:	d10c      	bne.n	8000692 <xQueueGenericReset+0xa2>
				{
					portYIELD_WITHIN_API();
 8000678:	f7ff fee8 	bl	800044c <vPortYieldFromISR>
 800067c:	e009      	b.n	8000692 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	3310      	adds	r3, #16
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff fdce 	bl	8000224 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );		
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	3324      	adds	r3, #36	; 0x24
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff fdc9 	bl	8000224 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000692:	f7ff fef9 	bl	8000488 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000696:	2301      	movs	r3, #1
}
 8000698:	4618      	mov	r0, r3
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	4613      	mov	r3, r2
 80006ac:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d026      	beq.n	8000706 <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 80006b8:	204c      	movs	r0, #76	; 0x4c
 80006ba:	f7ff ff47 	bl	800054c <pvPortMalloc>
 80006be:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
 80006c0:	69bb      	ldr	r3, [r7, #24]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d01f      	beq.n	8000706 <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	68ba      	ldr	r2, [r7, #8]
 80006ca:	fb02 f303 	mul.w	r3, r2, r3
 80006ce:	3301      	adds	r3, #1
 80006d0:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 80006d2:	6978      	ldr	r0, [r7, #20]
 80006d4:	f7ff ff3a 	bl	800054c <pvPortMalloc>
 80006d8:	4602      	mov	r2, r0
 80006da:	69bb      	ldr	r3, [r7, #24]
 80006dc:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
 80006de:	69bb      	ldr	r3, [r7, #24]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d00c      	beq.n	8000700 <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
 80006e6:	69bb      	ldr	r3, [r7, #24]
 80006e8:	68fa      	ldr	r2, [r7, #12]
 80006ea:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 80006ec:	69bb      	ldr	r3, [r7, #24]
 80006ee:	68ba      	ldr	r2, [r7, #8]
 80006f0:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
 80006f2:	2101      	movs	r1, #1
 80006f4:	69b8      	ldr	r0, [r7, #24]
 80006f6:	f7ff ff7b 	bl	80005f0 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
 80006fa:	69bb      	ldr	r3, [r7, #24]
 80006fc:	61fb      	str	r3, [r7, #28]
 80006fe:	e002      	b.n	8000706 <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
 8000700:	69b8      	ldr	r0, [r7, #24]
 8000702:	f7ff ff5f 	bl	80005c4 <vPortFree>
			}
		}
	}

	configASSERT( xReturn );
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d104      	bne.n	8000716 <xQueueGenericCreate+0x76>
 800070c:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000710:	f380 8811 	msr	BASEPRI, r0
 8000714:	e7fe      	b.n	8000714 <xQueueGenericCreate+0x74>

	return xReturn;
 8000716:	69fb      	ldr	r3, [r7, #28]
}
 8000718:	4618      	mov	r0, r3
 800071a:	3720      	adds	r7, #32
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
 800072c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 800072e:	2300      	movs	r3, #0
 8000730:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d104      	bne.n	8000742 <xQueueGenericSend+0x22>
 8000738:	f04f 0050 	mov.w	r0, #80	; 0x50
 800073c:	f380 8811 	msr	BASEPRI, r0
 8000740:	e7fe      	b.n	8000740 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d103      	bne.n	8000750 <xQueueGenericSend+0x30>
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	2b00      	cmp	r3, #0
 800074e:	d101      	bne.n	8000754 <xQueueGenericSend+0x34>
 8000750:	2301      	movs	r3, #1
 8000752:	e000      	b.n	8000756 <xQueueGenericSend+0x36>
 8000754:	2300      	movs	r3, #0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d104      	bne.n	8000764 <xQueueGenericSend+0x44>
 800075a:	f04f 0050 	mov.w	r0, #80	; 0x50
 800075e:	f380 8811 	msr	BASEPRI, r0
 8000762:	e7fe      	b.n	8000762 <xQueueGenericSend+0x42>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000764:	f7ff fe7e 	bl	8000464 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000770:	429a      	cmp	r2, r3
 8000772:	d216      	bcs.n	80007a2 <xQueueGenericSend+0x82>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000774:	683a      	ldr	r2, [r7, #0]
 8000776:	68b9      	ldr	r1, [r7, #8]
 8000778:	68f8      	ldr	r0, [r7, #12]
 800077a:	f000 f996 	bl	8000aaa <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000782:	2b00      	cmp	r3, #0
 8000784:	d009      	beq.n	800079a <xQueueGenericSend+0x7a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	3324      	adds	r3, #36	; 0x24
 800078a:	4618      	mov	r0, r3
 800078c:	f000 fe64 	bl	8001458 <xTaskRemoveFromEventList>
 8000790:	4603      	mov	r3, r0
 8000792:	2b01      	cmp	r3, #1
 8000794:	d101      	bne.n	800079a <xQueueGenericSend+0x7a>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
 8000796:	f7ff fe59 	bl	800044c <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
 800079a:	f7ff fe75 	bl	8000488 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 800079e:	2301      	movs	r3, #1
 80007a0:	e056      	b.n	8000850 <xQueueGenericSend+0x130>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d103      	bne.n	80007b0 <xQueueGenericSend+0x90>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80007a8:	f7ff fe6e 	bl	8000488 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	e04f      	b.n	8000850 <xQueueGenericSend+0x130>
				}
				else if( xEntryTimeSet == pdFALSE )
 80007b0:	69fb      	ldr	r3, [r7, #28]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d106      	bne.n	80007c4 <xQueueGenericSend+0xa4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 fea4 	bl	8001508 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80007c0:	2301      	movs	r3, #1
 80007c2:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
 80007c4:	f7ff fe60 	bl	8000488 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80007c8:	f000 fc20 	bl	800100c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80007cc:	f7ff fe4a 	bl	8000464 <vPortEnterCritical>
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80007d8:	d102      	bne.n	80007e0 <xQueueGenericSend+0xc0>
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	2200      	movs	r2, #0
 80007de:	645a      	str	r2, [r3, #68]	; 0x44
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80007e8:	d102      	bne.n	80007f0 <xQueueGenericSend+0xd0>
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	2200      	movs	r2, #0
 80007ee:	649a      	str	r2, [r3, #72]	; 0x48
 80007f0:	f7ff fe4a 	bl	8000488 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80007f4:	1d3a      	adds	r2, r7, #4
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	4611      	mov	r1, r2
 80007fc:	4618      	mov	r0, r3
 80007fe:	f000 fea1 	bl	8001544 <xTaskCheckForTimeOut>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d11d      	bne.n	8000844 <xQueueGenericSend+0x124>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000808:	68f8      	ldr	r0, [r7, #12]
 800080a:	f000 fa30 	bl	8000c6e <prvIsQueueFull>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d011      	beq.n	8000838 <xQueueGenericSend+0x118>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	3310      	adds	r3, #16
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	4611      	mov	r1, r2
 800081c:	4618      	mov	r0, r3
 800081e:	f000 fdb9 	bl	8001394 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000822:	68f8      	ldr	r0, [r7, #12]
 8000824:	f000 f9c2 	bl	8000bac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000828:	f000 fbfe 	bl	8001028 <xTaskResumeAll>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d198      	bne.n	8000764 <xQueueGenericSend+0x44>
				{
					portYIELD_WITHIN_API();
 8000832:	f7ff fe0b 	bl	800044c <vPortYieldFromISR>
 8000836:	e795      	b.n	8000764 <xQueueGenericSend+0x44>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000838:	68f8      	ldr	r0, [r7, #12]
 800083a:	f000 f9b7 	bl	8000bac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800083e:	f000 fbf3 	bl	8001028 <xTaskResumeAll>
 8000842:	e78f      	b.n	8000764 <xQueueGenericSend+0x44>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000844:	68f8      	ldr	r0, [r7, #12]
 8000846:	f000 f9b1 	bl	8000bac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800084a:	f000 fbed 	bl	8001028 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800084e:	2300      	movs	r3, #0
		}
	}
}
 8000850:	4618      	mov	r0, r3
 8000852:	3720      	adds	r7, #32
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
 8000864:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d104      	bne.n	8000876 <xQueueGenericSendFromISR+0x1e>
 800086c:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000870:	f380 8811 	msr	BASEPRI, r0
 8000874:	e7fe      	b.n	8000874 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d103      	bne.n	8000884 <xQueueGenericSendFromISR+0x2c>
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000880:	2b00      	cmp	r3, #0
 8000882:	d101      	bne.n	8000888 <xQueueGenericSendFromISR+0x30>
 8000884:	2301      	movs	r3, #1
 8000886:	e000      	b.n	800088a <xQueueGenericSendFromISR+0x32>
 8000888:	2300      	movs	r3, #0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d104      	bne.n	8000898 <xQueueGenericSendFromISR+0x40>
 800088e:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000892:	f380 8811 	msr	BASEPRI, r0
 8000896:	e7fe      	b.n	8000896 <xQueueGenericSendFromISR+0x3e>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000898:	2300      	movs	r3, #0
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	f04f 0050 	mov.w	r0, #80	; 0x50
 80008a0:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d224      	bcs.n	80008fa <xQueueGenericSendFromISR+0xa2>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80008b0:	683a      	ldr	r2, [r7, #0]
 80008b2:	68b9      	ldr	r1, [r7, #8]
 80008b4:	68f8      	ldr	r0, [r7, #12]
 80008b6:	f000 f8f8 	bl	8000aaa <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80008c2:	d112      	bne.n	80008ea <xQueueGenericSendFromISR+0x92>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d013      	beq.n	80008f4 <xQueueGenericSendFromISR+0x9c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	3324      	adds	r3, #36	; 0x24
 80008d0:	4618      	mov	r0, r3
 80008d2:	f000 fdc1 	bl	8001458 <xTaskRemoveFromEventList>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d00b      	beq.n	80008f4 <xQueueGenericSendFromISR+0x9c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d008      	beq.n	80008f4 <xQueueGenericSendFromISR+0x9c>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2201      	movs	r2, #1
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	e004      	b.n	80008f4 <xQueueGenericSendFromISR+0x9c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008ee:	1c5a      	adds	r2, r3, #1
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 80008f4:	2301      	movs	r3, #1
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	e001      	b.n	80008fe <xQueueGenericSendFromISR+0xa6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
 8000906:	697b      	ldr	r3, [r7, #20]
}
 8000908:	4618      	mov	r0, r3
 800090a:	3718      	adds	r7, #24
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b088      	sub	sp, #32
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	607a      	str	r2, [r7, #4]
 800091c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d104      	bne.n	8000932 <xQueueGenericReceive+0x22>
 8000928:	f04f 0050 	mov.w	r0, #80	; 0x50
 800092c:	f380 8811 	msr	BASEPRI, r0
 8000930:	e7fe      	b.n	8000930 <xQueueGenericReceive+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d103      	bne.n	8000940 <xQueueGenericReceive+0x30>
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093c:	2b00      	cmp	r3, #0
 800093e:	d101      	bne.n	8000944 <xQueueGenericReceive+0x34>
 8000940:	2301      	movs	r3, #1
 8000942:	e000      	b.n	8000946 <xQueueGenericReceive+0x36>
 8000944:	2300      	movs	r3, #0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d104      	bne.n	8000954 <xQueueGenericReceive+0x44>
 800094a:	f04f 0050 	mov.w	r0, #80	; 0x50
 800094e:	f380 8811 	msr	BASEPRI, r0
 8000952:	e7fe      	b.n	8000952 <xQueueGenericReceive+0x42>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8000954:	f7ff fd86 	bl	8000464 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800095c:	2b00      	cmp	r3, #0
 800095e:	d03b      	beq.n	80009d8 <xQueueGenericReceive+0xc8>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000966:	68b9      	ldr	r1, [r7, #8]
 8000968:	68f8      	ldr	r0, [r7, #12]
 800096a:	f000 f8f9 	bl	8000b60 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d11c      	bne.n	80009ae <xQueueGenericReceive+0x9e>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000978:	1e5a      	subs	r2, r3, #1
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d104      	bne.n	8000990 <xQueueGenericReceive+0x80>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
 8000986:	f000 ff77 	bl	8001878 <xTaskGetCurrentTaskHandle>
 800098a:	4602      	mov	r2, r0
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	691b      	ldr	r3, [r3, #16]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d01b      	beq.n	80009d0 <xQueueGenericReceive+0xc0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	3310      	adds	r3, #16
 800099c:	4618      	mov	r0, r3
 800099e:	f000 fd5b 	bl	8001458 <xTaskRemoveFromEventList>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d113      	bne.n	80009d0 <xQueueGenericReceive+0xc0>
						{
							portYIELD_WITHIN_API();
 80009a8:	f7ff fd50 	bl	800044c <vPortYieldFromISR>
 80009ac:	e010      	b.n	80009d0 <xQueueGenericReceive+0xc0>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	69ba      	ldr	r2, [r7, #24]
 80009b2:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d009      	beq.n	80009d0 <xQueueGenericReceive+0xc0>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	3324      	adds	r3, #36	; 0x24
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 fd49 	bl	8001458 <xTaskRemoveFromEventList>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <xQueueGenericReceive+0xc0>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
 80009cc:	f7ff fd3e 	bl	800044c <vPortYieldFromISR>
						}
					}
				}

				taskEXIT_CRITICAL();
 80009d0:	f7ff fd5a 	bl	8000488 <vPortExitCritical>
				return pdPASS;
 80009d4:	2301      	movs	r3, #1
 80009d6:	e064      	b.n	8000aa2 <xQueueGenericReceive+0x192>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d103      	bne.n	80009e6 <xQueueGenericReceive+0xd6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80009de:	f7ff fd53 	bl	8000488 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80009e2:	2300      	movs	r3, #0
 80009e4:	e05d      	b.n	8000aa2 <xQueueGenericReceive+0x192>
				}
				else if( xEntryTimeSet == pdFALSE )
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d106      	bne.n	80009fa <xQueueGenericReceive+0xea>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80009ec:	f107 0310 	add.w	r3, r7, #16
 80009f0:	4618      	mov	r0, r3
 80009f2:	f000 fd89 	bl	8001508 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80009f6:	2301      	movs	r3, #1
 80009f8:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
 80009fa:	f7ff fd45 	bl	8000488 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80009fe:	f000 fb05 	bl	800100c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000a02:	f7ff fd2f 	bl	8000464 <vPortEnterCritical>
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a0e:	d102      	bne.n	8000a16 <xQueueGenericReceive+0x106>
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	2200      	movs	r2, #0
 8000a14:	645a      	str	r2, [r3, #68]	; 0x44
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a1e:	d102      	bne.n	8000a26 <xQueueGenericReceive+0x116>
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	2200      	movs	r2, #0
 8000a24:	649a      	str	r2, [r3, #72]	; 0x48
 8000a26:	f7ff fd2f 	bl	8000488 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a2a:	1d3a      	adds	r2, r7, #4
 8000a2c:	f107 0310 	add.w	r3, r7, #16
 8000a30:	4611      	mov	r1, r2
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 fd86 	bl	8001544 <xTaskCheckForTimeOut>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d12b      	bne.n	8000a96 <xQueueGenericReceive+0x186>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000a3e:	68f8      	ldr	r0, [r7, #12]
 8000a40:	f000 f900 	bl	8000c44 <prvIsQueueEmpty>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d01f      	beq.n	8000a8a <xQueueGenericReceive+0x17a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d108      	bne.n	8000a64 <xQueueGenericReceive+0x154>
					{
						portENTER_CRITICAL();
 8000a52:	f7ff fd07 	bl	8000464 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 ff38 	bl	80018d0 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
 8000a60:	f7ff fd12 	bl	8000488 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	3324      	adds	r3, #36	; 0x24
 8000a68:	687a      	ldr	r2, [r7, #4]
 8000a6a:	4611      	mov	r1, r2
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f000 fc91 	bl	8001394 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8000a72:	68f8      	ldr	r0, [r7, #12]
 8000a74:	f000 f89a 	bl	8000bac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8000a78:	f000 fad6 	bl	8001028 <xTaskResumeAll>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	f47f af68 	bne.w	8000954 <xQueueGenericReceive+0x44>
				{
					portYIELD_WITHIN_API();
 8000a84:	f7ff fce2 	bl	800044c <vPortYieldFromISR>
 8000a88:	e764      	b.n	8000954 <xQueueGenericReceive+0x44>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000a8a:	68f8      	ldr	r0, [r7, #12]
 8000a8c:	f000 f88e 	bl	8000bac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000a90:	f000 faca 	bl	8001028 <xTaskResumeAll>
 8000a94:	e75e      	b.n	8000954 <xQueueGenericReceive+0x44>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8000a96:	68f8      	ldr	r0, [r7, #12]
 8000a98:	f000 f888 	bl	8000bac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000a9c:	f000 fac4 	bl	8001028 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 8000aa0:	2300      	movs	r3, #0
		}
	}
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3720      	adds	r7, #32
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b084      	sub	sp, #16
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	60f8      	str	r0, [r7, #12]
 8000ab2:	60b9      	str	r1, [r7, #8]
 8000ab4:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d10c      	bne.n	8000ad8 <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d143      	bne.n	8000b4e <prvCopyDataToQueue+0xa4>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 ff5a 	bl	8001984 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	e03a      	b.n	8000b4e <prvCopyDataToQueue+0xa4>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d119      	bne.n	8000b12 <prvCopyDataToQueue+0x68>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	6898      	ldr	r0, [r3, #8]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	68b9      	ldr	r1, [r7, #8]
 8000aea:	f001 fca8 	bl	800243e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	689a      	ldr	r2, [r3, #8]
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	441a      	add	r2, r3
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	689a      	ldr	r2, [r3, #8]
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d322      	bcc.n	8000b4e <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	e01d      	b.n	8000b4e <prvCopyDataToQueue+0xa4>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	68d8      	ldr	r0, [r3, #12]
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	68b9      	ldr	r1, [r7, #8]
 8000b1e:	f001 fc8e 	bl	800243e <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	68da      	ldr	r2, [r3, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	425b      	negs	r3, r3
 8000b2c:	441a      	add	r2, r3
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	68da      	ldr	r2, [r3, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	d207      	bcs.n	8000b4e <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	685a      	ldr	r2, [r3, #4]
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	425b      	negs	r3, r3
 8000b48:	441a      	add	r2, r3
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b52:	1c5a      	adds	r2, r3, #1
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000b58:	bf00      	nop
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d018      	beq.n	8000ba4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	68da      	ldr	r2, [r3, #12]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	441a      	add	r2, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	68da      	ldr	r2, [r3, #12]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d303      	bcc.n	8000b94 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	68d9      	ldr	r1, [r3, #12]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	6838      	ldr	r0, [r7, #0]
 8000ba0:	f001 fc4d 	bl	800243e <memcpy>
	}
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8000bb4:	f7ff fc56 	bl	8000464 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8000bb8:	e012      	b.n	8000be0 <prvUnlockQueue+0x34>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d013      	beq.n	8000bea <prvUnlockQueue+0x3e>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	3324      	adds	r3, #36	; 0x24
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 fc46 	bl	8001458 <xTaskRemoveFromEventList>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
 8000bd2:	f000 fd0b 	bl	80015ec <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bda:	1e5a      	subs	r2, r3, #1
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	649a      	str	r2, [r3, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	dce8      	bgt.n	8000bba <prvUnlockQueue+0xe>
 8000be8:	e000      	b.n	8000bec <prvUnlockQueue+0x40>
			}
			else
			{
				break;
 8000bea:	bf00      	nop
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bf2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8000bf4:	f7ff fc48 	bl	8000488 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8000bf8:	f7ff fc34 	bl	8000464 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8000bfc:	e012      	b.n	8000c24 <prvUnlockQueue+0x78>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	691b      	ldr	r3, [r3, #16]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d013      	beq.n	8000c2e <prvUnlockQueue+0x82>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	3310      	adds	r3, #16
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 fc24 	bl	8001458 <xTaskRemoveFromEventList>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
 8000c16:	f000 fce9 	bl	80015ec <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	1e5a      	subs	r2, r3, #1
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	645a      	str	r2, [r3, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	dce8      	bgt.n	8000bfe <prvUnlockQueue+0x52>
 8000c2c:	e000      	b.n	8000c30 <prvUnlockQueue+0x84>
			}
			else
			{
				break;
 8000c2e:	bf00      	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c36:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8000c38:	f7ff fc26 	bl	8000488 <vPortExitCritical>
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8000c4c:	f7ff fc0a 	bl	8000464 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	bf0c      	ite	eq
 8000c58:	2301      	moveq	r3, #1
 8000c5a:	2300      	movne	r3, #0
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
 8000c60:	f7ff fc12 	bl	8000488 <vPortExitCritical>

	return xReturn;
 8000c64:	68fb      	ldr	r3, [r7, #12]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b084      	sub	sp, #16
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8000c76:	f7ff fbf5 	bl	8000464 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c82:	429a      	cmp	r2, r3
 8000c84:	bf0c      	ite	eq
 8000c86:	2301      	moveq	r3, #1
 8000c88:	2300      	movne	r3, #0
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
 8000c8e:	f7ff fbfb 	bl	8000488 <vPortExitCritical>

	return xReturn;
 8000c92:	68fb      	ldr	r3, [r7, #12]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3710      	adds	r7, #16
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if configQUEUE_REGISTRY_SIZE > 0

	void vQueueAddToRegistry( xQueueHandle xQueue, signed char *pcQueueName )
	{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
	unsigned portBASE_TYPE ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( unsigned portBASE_TYPE ) 0U; ux < ( unsigned portBASE_TYPE ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	e014      	b.n	8000cd6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8000cac:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <vQueueAddToRegistry+0x4c>)
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d10b      	bne.n	8000cd0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8000cb8:	490b      	ldr	r1, [pc, #44]	; (8000ce8 <vQueueAddToRegistry+0x4c>)
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	683a      	ldr	r2, [r7, #0]
 8000cbe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8000cc2:	4a09      	ldr	r2, [pc, #36]	; (8000ce8 <vQueueAddToRegistry+0x4c>)
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	4413      	add	r3, r2
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	605a      	str	r2, [r3, #4]
				break;
 8000cce:	e005      	b.n	8000cdc <vQueueAddToRegistry+0x40>
		for( ux = ( unsigned portBASE_TYPE ) 0U; ux < ( unsigned portBASE_TYPE ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	2b0f      	cmp	r3, #15
 8000cda:	d9e7      	bls.n	8000cac <vQueueAddToRegistry+0x10>
			}
		}
	}
 8000cdc:	bf00      	nop
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20001d7c 	.word	0x20001d7c

08000cec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8000cf6:	f7ff fbb5 	bl	8000464 <vPortEnterCritical>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d02:	d102      	bne.n	8000d0a <vQueueWaitForMessageRestricted+0x1e>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2200      	movs	r2, #0
 8000d08:	645a      	str	r2, [r3, #68]	; 0x44
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d12:	d102      	bne.n	8000d1a <vQueueWaitForMessageRestricted+0x2e>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2200      	movs	r2, #0
 8000d18:	649a      	str	r2, [r3, #72]	; 0x48
 8000d1a:	f7ff fbb5 	bl	8000488 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d105      	bne.n	8000d32 <vQueueWaitForMessageRestricted+0x46>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	3324      	adds	r3, #36	; 0x24
 8000d2a:	6839      	ldr	r1, [r7, #0]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f000 fb69 	bl	8001404 <vTaskPlaceOnEventListRestricted>
		}
		prvUnlockQueue( pxQueue );
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f7ff ff3a 	bl	8000bac <prvUnlockQueue>
	}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08a      	sub	sp, #40	; 0x28
 8000d44:	af02      	add	r7, sp, #8
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	603b      	str	r3, [r7, #0]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d104      	bne.n	8000d60 <xTaskGenericCreate+0x20>
 8000d56:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000d5a:	f380 8811 	msr	BASEPRI, r0
 8000d5e:	e7fe      	b.n	8000d5e <xTaskGenericCreate+0x1e>
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );
 8000d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d62:	2b04      	cmp	r3, #4
 8000d64:	d904      	bls.n	8000d70 <xTaskGenericCreate+0x30>
 8000d66:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000d6a:	f380 8811 	msr	BASEPRI, r0
 8000d6e:	e7fe      	b.n	8000d6e <xTaskGenericCreate+0x2e>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 8000d70:	88fb      	ldrh	r3, [r7, #6]
 8000d72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000d74:	4618      	mov	r0, r3
 8000d76:	f000 fd3d 	bl	80017f4 <prvAllocateTCBAndStack>
 8000d7a:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f000 8086 	beq.w	8000e90 <xTaskGenericCreate+0x150>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d88:	88fb      	ldrh	r3, [r7, #6]
 8000d8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	4413      	add	r3, r2
 8000d94:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	f023 0307 	bic.w	r3, r3, #7
 8000d9c:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	f003 0307 	and.w	r3, r3, #7
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d004      	beq.n	8000db2 <xTaskGenericCreate+0x72>
 8000da8:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000dac:	f380 8811 	msr	BASEPRI, r0
 8000db0:	e7fe      	b.n	8000db0 <xTaskGenericCreate+0x70>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	9300      	str	r3, [sp, #0]
 8000db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000db8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000dba:	68b9      	ldr	r1, [r7, #8]
 8000dbc:	69b8      	ldr	r0, [r7, #24]
 8000dbe:	f000 fc33 	bl	8001628 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000dc2:	683a      	ldr	r2, [r7, #0]
 8000dc4:	68f9      	ldr	r1, [r7, #12]
 8000dc6:	6978      	ldr	r0, [r7, #20]
 8000dc8:	f7ff fadd 	bl	8000386 <pxPortInitialiseStack>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	601a      	str	r2, [r3, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d004      	beq.n	8000de8 <xTaskGenericCreate+0xa8>
 8000dde:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000de2:	f380 8811 	msr	BASEPRI, r0
 8000de6:	e7fe      	b.n	8000de6 <xTaskGenericCreate+0xa6>

		if( ( void * ) pxCreatedTask != NULL )
 8000de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d002      	beq.n	8000df4 <xTaskGenericCreate+0xb4>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 8000dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
 8000df4:	f7ff fb36 	bl	8000464 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8000df8:	4b31      	ldr	r3, [pc, #196]	; (8000ec0 <xTaskGenericCreate+0x180>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	4a30      	ldr	r2, [pc, #192]	; (8000ec0 <xTaskGenericCreate+0x180>)
 8000e00:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 8000e02:	4b30      	ldr	r3, [pc, #192]	; (8000ec4 <xTaskGenericCreate+0x184>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d109      	bne.n	8000e1e <xTaskGenericCreate+0xde>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8000e0a:	4a2e      	ldr	r2, [pc, #184]	; (8000ec4 <xTaskGenericCreate+0x184>)
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	6013      	str	r3, [r2, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 8000e10:	4b2b      	ldr	r3, [pc, #172]	; (8000ec0 <xTaskGenericCreate+0x180>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d10f      	bne.n	8000e38 <xTaskGenericCreate+0xf8>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 8000e18:	f000 fc3c 	bl	8001694 <prvInitialiseTaskLists>
 8000e1c:	e00c      	b.n	8000e38 <xTaskGenericCreate+0xf8>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8000e1e:	4b2a      	ldr	r3, [pc, #168]	; (8000ec8 <xTaskGenericCreate+0x188>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d108      	bne.n	8000e38 <xTaskGenericCreate+0xf8>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8000e26:	4b27      	ldr	r3, [pc, #156]	; (8000ec4 <xTaskGenericCreate+0x184>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d802      	bhi.n	8000e38 <xTaskGenericCreate+0xf8>
					{
						pxCurrentTCB = pxNewTCB;
 8000e32:	4a24      	ldr	r2, [pc, #144]	; (8000ec4 <xTaskGenericCreate+0x184>)
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	6013      	str	r3, [r2, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e3c:	4b23      	ldr	r3, [pc, #140]	; (8000ecc <xTaskGenericCreate+0x18c>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d903      	bls.n	8000e4c <xTaskGenericCreate+0x10c>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e48:	4a20      	ldr	r2, [pc, #128]	; (8000ecc <xTaskGenericCreate+0x18c>)
 8000e4a:	6013      	str	r3, [r2, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
 8000e4c:	4b20      	ldr	r3, [pc, #128]	; (8000ed0 <xTaskGenericCreate+0x190>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	3301      	adds	r3, #1
 8000e52:	4a1f      	ldr	r2, [pc, #124]	; (8000ed0 <xTaskGenericCreate+0x190>)
 8000e54:	6013      	str	r3, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e5a:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <xTaskGenericCreate+0x194>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d903      	bls.n	8000e6a <xTaskGenericCreate+0x12a>
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e66:	4a1b      	ldr	r2, [pc, #108]	; (8000ed4 <xTaskGenericCreate+0x194>)
 8000e68:	6013      	str	r3, [r2, #0]
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e6e:	4613      	mov	r3, r2
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	4413      	add	r3, r2
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	4a18      	ldr	r2, [pc, #96]	; (8000ed8 <xTaskGenericCreate+0x198>)
 8000e78:	441a      	add	r2, r3
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4610      	mov	r0, r2
 8000e82:	f7ff f9fa 	bl	800027a <vListInsertEnd>

			xReturn = pdPASS;
 8000e86:	2301      	movs	r3, #1
 8000e88:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8000e8a:	f7ff fafd 	bl	8000488 <vPortExitCritical>
 8000e8e:	e002      	b.n	8000e96 <xTaskGenericCreate+0x156>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000e90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e94:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d10b      	bne.n	8000eb4 <xTaskGenericCreate+0x174>
	{
		if( xSchedulerRunning != pdFALSE )
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <xTaskGenericCreate+0x188>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d007      	beq.n	8000eb4 <xTaskGenericCreate+0x174>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8000ea4:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <xTaskGenericCreate+0x184>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d201      	bcs.n	8000eb4 <xTaskGenericCreate+0x174>
			{
				portYIELD_WITHIN_API();
 8000eb0:	f7ff facc 	bl	800044c <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
 8000eb4:	69fb      	ldr	r3, [r7, #28]
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3720      	adds	r7, #32
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20001d04 	.word	0x20001d04
 8000ec4:	20001c2c 	.word	0x20001c2c
 8000ec8:	20001d14 	.word	0x20001d14
 8000ecc:	20001d0c 	.word	0x20001d0c
 8000ed0:	20001d28 	.word	0x20001d28
 8000ed4:	20001d10 	.word	0x20001d10
 8000ed8:	20001c30 	.word	0x20001c30

08000edc <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d104      	bne.n	8000efa <vTaskDelayUntil+0x1e>
 8000ef0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000ef4:	f380 8811 	msr	BASEPRI, r0
 8000ef8:	e7fe      	b.n	8000ef8 <vTaskDelayUntil+0x1c>
		configASSERT( ( xTimeIncrement > 0U ) );
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d104      	bne.n	8000f0a <vTaskDelayUntil+0x2e>
 8000f00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000f04:	f380 8811 	msr	BASEPRI, r0
 8000f08:	e7fe      	b.n	8000f08 <vTaskDelayUntil+0x2c>

		vTaskSuspendAll();
 8000f0a:	f000 f87f 	bl	800100c <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	4413      	add	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	; (8000f8c <vTaskDelayUntil+0xb0>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d90c      	bls.n	8000f3e <vTaskDelayUntil+0x62>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d913      	bls.n	8000f56 <vTaskDelayUntil+0x7a>
 8000f2e:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <vTaskDelayUntil+0xb0>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d90e      	bls.n	8000f56 <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	e00b      	b.n	8000f56 <vTaskDelayUntil+0x7a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d804      	bhi.n	8000f52 <vTaskDelayUntil+0x76>
 8000f48:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <vTaskDelayUntil+0xb0>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d901      	bls.n	8000f56 <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
 8000f52:	2301      	movs	r3, #1
 8000f54:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d008      	beq.n	8000f74 <vTaskDelayUntil+0x98>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8000f62:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <vTaskDelayUntil+0xb4>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	3304      	adds	r3, #4
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff f9e5 	bl	8000338 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8000f6e:	6938      	ldr	r0, [r7, #16]
 8000f70:	f000 fc0a 	bl	8001788 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8000f74:	f000 f858 	bl	8001028 <xTaskResumeAll>
 8000f78:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d101      	bne.n	8000f84 <vTaskDelayUntil+0xa8>
		{
			portYIELD_WITHIN_API();
 8000f80:	f7ff fa64 	bl	800044c <vPortYieldFromISR>
		}
	}
 8000f84:	bf00      	nop
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20001d08 	.word	0x20001d08
 8000f90:	20001c2c 	.word	0x20001c2c

08000f94 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	9303      	str	r3, [sp, #12]
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	9302      	str	r3, [sp, #8]
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	9301      	str	r3, [sp, #4]
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	2300      	movs	r3, #0
 8000fac:	2246      	movs	r2, #70	; 0x46
 8000fae:	4913      	ldr	r1, [pc, #76]	; (8000ffc <vTaskStartScheduler+0x68>)
 8000fb0:	4813      	ldr	r0, [pc, #76]	; (8001000 <vTaskStartScheduler+0x6c>)
 8000fb2:	f7ff fec5 	bl	8000d40 <xTaskGenericCreate>
 8000fb6:	6078      	str	r0, [r7, #4]
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d102      	bne.n	8000fc4 <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
 8000fbe:	f000 fd1f 	bl	8001a00 <xTimerCreateTimerTask>
 8000fc2:	6078      	str	r0, [r7, #4]
		}
	}
	#endif

	if( xReturn == pdPASS )
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d10b      	bne.n	8000fe2 <vTaskStartScheduler+0x4e>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
 8000fca:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000fce:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <vTaskStartScheduler+0x70>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <vTaskStartScheduler+0x74>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8000fde:	f7ff fa19 	bl	8000414 <xPortStartScheduler>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d104      	bne.n	8000ff2 <vTaskStartScheduler+0x5e>
 8000fe8:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000fec:	f380 8811 	msr	BASEPRI, r0
 8000ff0:	e7fe      	b.n	8000ff0 <vTaskStartScheduler+0x5c>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	08002490 	.word	0x08002490
 8001000:	08001605 	.word	0x08001605
 8001004:	20001d14 	.word	0x20001d14
 8001008:	20001d08 	.word	0x20001d08

0800100c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <vTaskSuspendAll+0x18>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	3301      	adds	r3, #1
 8001016:	4a03      	ldr	r2, [pc, #12]	; (8001024 <vTaskSuspendAll+0x18>)
 8001018:	6013      	str	r3, [r2, #0]
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20001d18 	.word	0x20001d18

08001028 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 800102e:	2300      	movs	r3, #0
 8001030:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001032:	4b37      	ldr	r3, [pc, #220]	; (8001110 <xTaskResumeAll+0xe8>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d104      	bne.n	8001044 <xTaskResumeAll+0x1c>
 800103a:	f04f 0050 	mov.w	r0, #80	; 0x50
 800103e:	f380 8811 	msr	BASEPRI, r0
 8001042:	e7fe      	b.n	8001042 <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001044:	f7ff fa0e 	bl	8000464 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001048:	4b31      	ldr	r3, [pc, #196]	; (8001110 <xTaskResumeAll+0xe8>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	3b01      	subs	r3, #1
 800104e:	4a30      	ldr	r2, [pc, #192]	; (8001110 <xTaskResumeAll+0xe8>)
 8001050:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8001052:	4b2f      	ldr	r3, [pc, #188]	; (8001110 <xTaskResumeAll+0xe8>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d152      	bne.n	8001100 <xTaskResumeAll+0xd8>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 800105a:	4b2e      	ldr	r3, [pc, #184]	; (8001114 <xTaskResumeAll+0xec>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d04e      	beq.n	8001100 <xTaskResumeAll+0xd8>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
 8001062:	2300      	movs	r3, #0
 8001064:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 8001066:	e027      	b.n	80010b8 <xTaskResumeAll+0x90>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
 8001068:	4b2b      	ldr	r3, [pc, #172]	; (8001118 <xTaskResumeAll+0xf0>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
 800106e:	f104 0318 	add.w	r3, r4, #24
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff f960 	bl	8000338 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
 8001078:	1d23      	adds	r3, r4, #4
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff f95c 	bl	8000338 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
 8001080:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001082:	4b26      	ldr	r3, [pc, #152]	; (800111c <xTaskResumeAll+0xf4>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	429a      	cmp	r2, r3
 8001088:	d902      	bls.n	8001090 <xTaskResumeAll+0x68>
 800108a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800108c:	4a23      	ldr	r2, [pc, #140]	; (800111c <xTaskResumeAll+0xf4>)
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	4a21      	ldr	r2, [pc, #132]	; (8001120 <xTaskResumeAll+0xf8>)
 800109c:	4413      	add	r3, r2
 800109e:	1d22      	adds	r2, r4, #4
 80010a0:	4611      	mov	r1, r2
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff f8e9 	bl	800027a <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80010a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80010aa:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <xTaskResumeAll+0xfc>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d301      	bcc.n	80010b8 <xTaskResumeAll+0x90>
					{
						xYieldRequired = pdTRUE;
 80010b4:	2301      	movs	r3, #1
 80010b6:	603b      	str	r3, [r7, #0]
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 80010b8:	4b17      	ldr	r3, [pc, #92]	; (8001118 <xTaskResumeAll+0xf0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d1d3      	bne.n	8001068 <xTaskResumeAll+0x40>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 80010c0:	4b19      	ldr	r3, [pc, #100]	; (8001128 <xTaskResumeAll+0x100>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d00d      	beq.n	80010e4 <xTaskResumeAll+0xbc>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 80010c8:	e006      	b.n	80010d8 <xTaskResumeAll+0xb0>
					{
						vTaskIncrementTick();
 80010ca:	f000 f843 	bl	8001154 <vTaskIncrementTick>
						--uxMissedTicks;
 80010ce:	4b16      	ldr	r3, [pc, #88]	; (8001128 <xTaskResumeAll+0x100>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	4a14      	ldr	r2, [pc, #80]	; (8001128 <xTaskResumeAll+0x100>)
 80010d6:	6013      	str	r3, [r2, #0]
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 80010d8:	4b13      	ldr	r3, [pc, #76]	; (8001128 <xTaskResumeAll+0x100>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d1f4      	bne.n	80010ca <xTaskResumeAll+0xa2>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
 80010e0:	2301      	movs	r3, #1
 80010e2:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d003      	beq.n	80010f2 <xTaskResumeAll+0xca>
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <xTaskResumeAll+0x104>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d106      	bne.n	8001100 <xTaskResumeAll+0xd8>
				{
					xAlreadyYielded = pdTRUE;
 80010f2:	2301      	movs	r3, #1
 80010f4:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
 80010f6:	4b0d      	ldr	r3, [pc, #52]	; (800112c <xTaskResumeAll+0x104>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
 80010fc:	f7ff f9a6 	bl	800044c <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 8001100:	f7ff f9c2 	bl	8000488 <vPortExitCritical>

	return xAlreadyYielded;
 8001104:	687b      	ldr	r3, [r7, #4]
}
 8001106:	4618      	mov	r0, r3
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	bd90      	pop	{r4, r7, pc}
 800110e:	bf00      	nop
 8001110:	20001d18 	.word	0x20001d18
 8001114:	20001d04 	.word	0x20001d04
 8001118:	20001cc4 	.word	0x20001cc4
 800111c:	20001d10 	.word	0x20001d10
 8001120:	20001c30 	.word	0x20001c30
 8001124:	20001c2c 	.word	0x20001c2c
 8001128:	20001d1c 	.word	0x20001d1c
 800112c:	20001d20 	.word	0x20001d20

08001130 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 8001136:	f7ff f995 	bl	8000464 <vPortEnterCritical>
	{
		xTicks = xTickCount;
 800113a:	4b05      	ldr	r3, [pc, #20]	; (8001150 <xTaskGetTickCount+0x20>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
 8001140:	f7ff f9a2 	bl	8000488 <vPortExitCritical>

	return xTicks;
 8001144:	687b      	ldr	r3, [r7, #4]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20001d08 	.word	0x20001d08

08001154 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 800115a:	4b49      	ldr	r3, [pc, #292]	; (8001280 <vTaskIncrementTick+0x12c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d17c      	bne.n	800125c <vTaskIncrementTick+0x108>
	{
		++xTickCount;
 8001162:	4b48      	ldr	r3, [pc, #288]	; (8001284 <vTaskIncrementTick+0x130>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	3301      	adds	r3, #1
 8001168:	4a46      	ldr	r2, [pc, #280]	; (8001284 <vTaskIncrementTick+0x130>)
 800116a:	6013      	str	r3, [r2, #0]
		if( xTickCount == ( portTickType ) 0U )
 800116c:	4b45      	ldr	r3, [pc, #276]	; (8001284 <vTaskIncrementTick+0x130>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d12b      	bne.n	80011cc <vTaskIncrementTick+0x78>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
 8001174:	4b44      	ldr	r3, [pc, #272]	; (8001288 <vTaskIncrementTick+0x134>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d004      	beq.n	8001188 <vTaskIncrementTick+0x34>
 800117e:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001182:	f380 8811 	msr	BASEPRI, r0
 8001186:	e7fe      	b.n	8001186 <vTaskIncrementTick+0x32>
			
			pxTemp = pxDelayedTaskList;
 8001188:	4b3f      	ldr	r3, [pc, #252]	; (8001288 <vTaskIncrementTick+0x134>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
 800118e:	4b3f      	ldr	r3, [pc, #252]	; (800128c <vTaskIncrementTick+0x138>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a3d      	ldr	r2, [pc, #244]	; (8001288 <vTaskIncrementTick+0x134>)
 8001194:	6013      	str	r3, [r2, #0]
			pxOverflowDelayedTaskList = pxTemp;
 8001196:	4a3d      	ldr	r2, [pc, #244]	; (800128c <vTaskIncrementTick+0x138>)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6013      	str	r3, [r2, #0]
			xNumOfOverflows++;
 800119c:	4b3c      	ldr	r3, [pc, #240]	; (8001290 <vTaskIncrementTick+0x13c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	3301      	adds	r3, #1
 80011a2:	4a3b      	ldr	r2, [pc, #236]	; (8001290 <vTaskIncrementTick+0x13c>)
 80011a4:	6013      	str	r3, [r2, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80011a6:	4b38      	ldr	r3, [pc, #224]	; (8001288 <vTaskIncrementTick+0x134>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d104      	bne.n	80011ba <vTaskIncrementTick+0x66>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
 80011b0:	4b38      	ldr	r3, [pc, #224]	; (8001294 <vTaskIncrementTick+0x140>)
 80011b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	e008      	b.n	80011cc <vTaskIncrementTick+0x78>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80011ba:	4b33      	ldr	r3, [pc, #204]	; (8001288 <vTaskIncrementTick+0x134>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	4a32      	ldr	r2, [pc, #200]	; (8001294 <vTaskIncrementTick+0x140>)
 80011ca:	6013      	str	r3, [r2, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
 80011cc:	4b2d      	ldr	r3, [pc, #180]	; (8001284 <vTaskIncrementTick+0x130>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4b30      	ldr	r3, [pc, #192]	; (8001294 <vTaskIncrementTick+0x140>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d348      	bcc.n	800126a <vTaskIncrementTick+0x116>
 80011d8:	4b2b      	ldr	r3, [pc, #172]	; (8001288 <vTaskIncrementTick+0x134>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d104      	bne.n	80011ec <vTaskIncrementTick+0x98>
 80011e2:	4b2c      	ldr	r3, [pc, #176]	; (8001294 <vTaskIncrementTick+0x140>)
 80011e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	e03e      	b.n	800126a <vTaskIncrementTick+0x116>
 80011ec:	4b26      	ldr	r3, [pc, #152]	; (8001288 <vTaskIncrementTick+0x134>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	4b21      	ldr	r3, [pc, #132]	; (8001284 <vTaskIncrementTick+0x130>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	429a      	cmp	r2, r3
 8001204:	d203      	bcs.n	800120e <vTaskIncrementTick+0xba>
 8001206:	4a23      	ldr	r2, [pc, #140]	; (8001294 <vTaskIncrementTick+0x140>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6013      	str	r3, [r2, #0]
 800120c:	e02d      	b.n	800126a <vTaskIncrementTick+0x116>
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	3304      	adds	r3, #4
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff f890 	bl	8000338 <vListRemove>
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121c:	2b00      	cmp	r3, #0
 800121e:	d004      	beq.n	800122a <vTaskIncrementTick+0xd6>
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	3318      	adds	r3, #24
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff f887 	bl	8000338 <vListRemove>
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800122e:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <vTaskIncrementTick+0x144>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	429a      	cmp	r2, r3
 8001234:	d903      	bls.n	800123e <vTaskIncrementTick+0xea>
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800123a:	4a17      	ldr	r2, [pc, #92]	; (8001298 <vTaskIncrementTick+0x144>)
 800123c:	6013      	str	r3, [r2, #0]
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001242:	4613      	mov	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4413      	add	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4a14      	ldr	r2, [pc, #80]	; (800129c <vTaskIncrementTick+0x148>)
 800124c:	441a      	add	r2, r3
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	3304      	adds	r3, #4
 8001252:	4619      	mov	r1, r3
 8001254:	4610      	mov	r0, r2
 8001256:	f7ff f810 	bl	800027a <vListInsertEnd>
 800125a:	e7bd      	b.n	80011d8 <vTaskIncrementTick+0x84>
	}
	else
	{
		++uxMissedTicks;
 800125c:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <vTaskIncrementTick+0x14c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	3301      	adds	r3, #1
 8001262:	4a0f      	ldr	r2, [pc, #60]	; (80012a0 <vTaskIncrementTick+0x14c>)
 8001264:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8001266:	f000 ff81 	bl	800216c <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
 800126a:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <vTaskIncrementTick+0x14c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d101      	bne.n	8001276 <vTaskIncrementTick+0x122>
		{
			vApplicationTickHook();
 8001272:	f000 ff7b 	bl	800216c <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20001d18 	.word	0x20001d18
 8001284:	20001d08 	.word	0x20001d08
 8001288:	20001cbc 	.word	0x20001cbc
 800128c:	20001cc0 	.word	0x20001cc0
 8001290:	20001d24 	.word	0x20001d24
 8001294:	20000004 	.word	0x20000004
 8001298:	20001d10 	.word	0x20001d10
 800129c:	20001c30 	.word	0x20001c30
 80012a0:	20001d1c 	.word	0x20001d1c

080012a4 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 80012aa:	4b34      	ldr	r3, [pc, #208]	; (800137c <vTaskSwitchContext+0xd8>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 80012b2:	4b33      	ldr	r3, [pc, #204]	; (8001380 <vTaskSwitchContext+0xdc>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	601a      	str	r2, [r3, #0]
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
	
		traceTASK_SWITCHED_IN();
	}
}
 80012b8:	e05c      	b.n	8001374 <vTaskSwitchContext+0xd0>
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 80012ba:	4b32      	ldr	r3, [pc, #200]	; (8001384 <vTaskSwitchContext+0xe0>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b30      	ldr	r3, [pc, #192]	; (8001384 <vTaskSwitchContext+0xe0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d808      	bhi.n	80012dc <vTaskSwitchContext+0x38>
 80012ca:	4b2e      	ldr	r3, [pc, #184]	; (8001384 <vTaskSwitchContext+0xe0>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	4b2d      	ldr	r3, [pc, #180]	; (8001384 <vTaskSwitchContext+0xe0>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	3334      	adds	r3, #52	; 0x34
 80012d4:	4619      	mov	r1, r3
 80012d6:	4610      	mov	r0, r2
 80012d8:	f000 ff6d 	bl	80021b6 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 80012dc:	4b29      	ldr	r3, [pc, #164]	; (8001384 <vTaskSwitchContext+0xe0>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	2214      	movs	r2, #20
 80012e4:	4928      	ldr	r1, [pc, #160]	; (8001388 <vTaskSwitchContext+0xe4>)
 80012e6:	4618      	mov	r0, r3
 80012e8:	f001 f89a 	bl	8002420 <memcmp>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d017      	beq.n	8001322 <vTaskSwitchContext+0x7e>
 80012f2:	4b24      	ldr	r3, [pc, #144]	; (8001384 <vTaskSwitchContext+0xe0>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	4b23      	ldr	r3, [pc, #140]	; (8001384 <vTaskSwitchContext+0xe0>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	3334      	adds	r3, #52	; 0x34
 80012fc:	4619      	mov	r1, r3
 80012fe:	4610      	mov	r0, r2
 8001300:	f000 ff59 	bl	80021b6 <vApplicationStackOverflowHook>
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 8001304:	e00d      	b.n	8001322 <vTaskSwitchContext+0x7e>
			configASSERT( uxTopReadyPriority );
 8001306:	4b21      	ldr	r3, [pc, #132]	; (800138c <vTaskSwitchContext+0xe8>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d104      	bne.n	8001318 <vTaskSwitchContext+0x74>
 800130e:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001312:	f380 8811 	msr	BASEPRI, r0
 8001316:	e7fe      	b.n	8001316 <vTaskSwitchContext+0x72>
			--uxTopReadyPriority;
 8001318:	4b1c      	ldr	r3, [pc, #112]	; (800138c <vTaskSwitchContext+0xe8>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	3b01      	subs	r3, #1
 800131e:	4a1b      	ldr	r2, [pc, #108]	; (800138c <vTaskSwitchContext+0xe8>)
 8001320:	6013      	str	r3, [r2, #0]
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 8001322:	4b1a      	ldr	r3, [pc, #104]	; (800138c <vTaskSwitchContext+0xe8>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	491a      	ldr	r1, [pc, #104]	; (8001390 <vTaskSwitchContext+0xec>)
 8001328:	4613      	mov	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	4413      	add	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	440b      	add	r3, r1
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0e6      	beq.n	8001306 <vTaskSwitchContext+0x62>
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 8001338:	4b14      	ldr	r3, [pc, #80]	; (800138c <vTaskSwitchContext+0xe8>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4613      	mov	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	4413      	add	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4a12      	ldr	r2, [pc, #72]	; (8001390 <vTaskSwitchContext+0xec>)
 8001346:	4413      	add	r3, r2
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3308      	adds	r3, #8
 800135c:	429a      	cmp	r2, r3
 800135e:	d104      	bne.n	800136a <vTaskSwitchContext+0xc6>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	685a      	ldr	r2, [r3, #4]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	4a04      	ldr	r2, [pc, #16]	; (8001384 <vTaskSwitchContext+0xe0>)
 8001372:	6013      	str	r3, [r2, #0]
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20001d18 	.word	0x20001d18
 8001380:	20001d20 	.word	0x20001d20
 8001384:	20001c2c 	.word	0x20001c2c
 8001388:	080024d4 	.word	0x080024d4
 800138c:	20001d10 	.word	0x20001d10
 8001390:	20001c30 	.word	0x20001c30

08001394 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d104      	bne.n	80013ae <vTaskPlaceOnEventList+0x1a>
 80013a4:	f04f 0050 	mov.w	r0, #80	; 0x50
 80013a8:	f380 8811 	msr	BASEPRI, r0
 80013ac:	e7fe      	b.n	80013ac <vTaskPlaceOnEventList+0x18>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 80013ae:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <vTaskPlaceOnEventList+0x64>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	3318      	adds	r3, #24
 80013b4:	4619      	mov	r1, r3
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7fe ff86 	bl	80002c8 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 80013bc:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <vTaskPlaceOnEventList+0x64>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	3304      	adds	r3, #4
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7fe ffb8 	bl	8000338 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013ce:	d107      	bne.n	80013e0 <vTaskPlaceOnEventList+0x4c>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 80013d0:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <vTaskPlaceOnEventList+0x64>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	3304      	adds	r3, #4
 80013d6:	4619      	mov	r1, r3
 80013d8:	4808      	ldr	r0, [pc, #32]	; (80013fc <vTaskPlaceOnEventList+0x68>)
 80013da:	f7fe ff4e 	bl	800027a <vListInsertEnd>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
 80013de:	e007      	b.n	80013f0 <vTaskPlaceOnEventList+0x5c>
			xTimeToWake = xTickCount + xTicksToWait;
 80013e0:	4b07      	ldr	r3, [pc, #28]	; (8001400 <vTaskPlaceOnEventList+0x6c>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	4413      	add	r3, r2
 80013e8:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 80013ea:	68f8      	ldr	r0, [r7, #12]
 80013ec:	f000 f9cc 	bl	8001788 <prvAddCurrentTaskToDelayedList>
}
 80013f0:	bf00      	nop
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20001c2c 	.word	0x20001c2c
 80013fc:	20001cf0 	.word	0x20001cf0
 8001400:	20001d08 	.word	0x20001d08

08001404 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d104      	bne.n	800141e <vTaskPlaceOnEventListRestricted+0x1a>
 8001414:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001418:	f380 8811 	msr	BASEPRI, r0
 800141c:	e7fe      	b.n	800141c <vTaskPlaceOnEventListRestricted+0x18>
	
		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 800141e:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <vTaskPlaceOnEventListRestricted+0x4c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	3318      	adds	r3, #24
 8001424:	4619      	mov	r1, r3
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7fe ff27 	bl	800027a <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <vTaskPlaceOnEventListRestricted+0x4c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	3304      	adds	r3, #4
 8001432:	4618      	mov	r0, r3
 8001434:	f7fe ff80 	bl	8000338 <vListRemove>

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <vTaskPlaceOnEventListRestricted+0x50>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	4413      	add	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 8001442:	68f8      	ldr	r0, [r7, #12]
 8001444:	f000 f9a0 	bl	8001788 <prvAddCurrentTaskToDelayedList>
	}
 8001448:	bf00      	nop
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20001c2c 	.word	0x20001c2c
 8001454:	20001d08 	.word	0x20001d08

08001458 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d104      	bne.n	8001478 <xTaskRemoveFromEventList+0x20>
 800146e:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001472:	f380 8811 	msr	BASEPRI, r0
 8001476:	e7fe      	b.n	8001476 <xTaskRemoveFromEventList+0x1e>
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	3318      	adds	r3, #24
 800147c:	4618      	mov	r0, r3
 800147e:	f7fe ff5b 	bl	8000338 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8001482:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <xTaskRemoveFromEventList+0x9c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d11d      	bne.n	80014c6 <xTaskRemoveFromEventList+0x6e>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	3304      	adds	r3, #4
 800148e:	4618      	mov	r0, r3
 8001490:	f7fe ff52 	bl	8000338 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001498:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <xTaskRemoveFromEventList+0xa0>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	429a      	cmp	r2, r3
 800149e:	d903      	bls.n	80014a8 <xTaskRemoveFromEventList+0x50>
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a4:	4a14      	ldr	r2, [pc, #80]	; (80014f8 <xTaskRemoveFromEventList+0xa0>)
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014ac:	4613      	mov	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4a11      	ldr	r2, [pc, #68]	; (80014fc <xTaskRemoveFromEventList+0xa4>)
 80014b6:	441a      	add	r2, r3
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	3304      	adds	r3, #4
 80014bc:	4619      	mov	r1, r3
 80014be:	4610      	mov	r0, r2
 80014c0:	f7fe fedb 	bl	800027a <vListInsertEnd>
 80014c4:	e005      	b.n	80014d2 <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	3318      	adds	r3, #24
 80014ca:	4619      	mov	r1, r3
 80014cc:	480c      	ldr	r0, [pc, #48]	; (8001500 <xTaskRemoveFromEventList+0xa8>)
 80014ce:	f7fe fed4 	bl	800027a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <xTaskRemoveFromEventList+0xac>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014dc:	429a      	cmp	r2, r3
 80014de:	d302      	bcc.n	80014e6 <xTaskRemoveFromEventList+0x8e>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 80014e0:	2301      	movs	r3, #1
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	e001      	b.n	80014ea <xTaskRemoveFromEventList+0x92>
	}
	else
	{
		xReturn = pdFALSE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80014ea:	68fb      	ldr	r3, [r7, #12]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20001d18 	.word	0x20001d18
 80014f8:	20001d10 	.word	0x20001d10
 80014fc:	20001c30 	.word	0x20001c30
 8001500:	20001cc4 	.word	0x20001cc4
 8001504:	20001c2c 	.word	0x20001c2c

08001508 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d104      	bne.n	8001520 <vTaskSetTimeOutState+0x18>
 8001516:	f04f 0050 	mov.w	r0, #80	; 0x50
 800151a:	f380 8811 	msr	BASEPRI, r0
 800151e:	e7fe      	b.n	800151e <vTaskSetTimeOutState+0x16>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <vTaskSetTimeOutState+0x34>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <vTaskSetTimeOutState+0x38>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	605a      	str	r2, [r3, #4]
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	20001d24 	.word	0x20001d24
 8001540:	20001d08 	.word	0x20001d08

08001544 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d104      	bne.n	800155e <xTaskCheckForTimeOut+0x1a>
 8001554:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001558:	f380 8811 	msr	BASEPRI, r0
 800155c:	e7fe      	b.n	800155c <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d104      	bne.n	800156e <xTaskCheckForTimeOut+0x2a>
 8001564:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001568:	f380 8811 	msr	BASEPRI, r0
 800156c:	e7fe      	b.n	800156c <xTaskCheckForTimeOut+0x28>

	taskENTER_CRITICAL();
 800156e:	f7fe ff79 	bl	8000464 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800157a:	d102      	bne.n	8001582 <xTaskCheckForTimeOut+0x3e>
			{
				xReturn = pdFALSE;
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	e029      	b.n	80015d6 <xTaskCheckForTimeOut+0x92>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <xTaskCheckForTimeOut+0xa0>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	429a      	cmp	r2, r3
 800158c:	d008      	beq.n	80015a0 <xTaskCheckForTimeOut+0x5c>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <xTaskCheckForTimeOut+0xa4>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	d802      	bhi.n	80015a0 <xTaskCheckForTimeOut+0x5c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 800159a:	2301      	movs	r3, #1
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	e01a      	b.n	80015d6 <xTaskCheckForTimeOut+0x92>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <xTaskCheckForTimeOut+0xa4>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	1ad2      	subs	r2, r2, r3
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d20f      	bcs.n	80015d2 <xTaskCheckForTimeOut+0x8e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
 80015b2:	4b0d      	ldr	r3, [pc, #52]	; (80015e8 <xTaskCheckForTimeOut+0xa4>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	6812      	ldr	r2, [r2, #0]
 80015c0:	1ad2      	subs	r2, r2, r3
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff ff9e 	bl	8001508 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	e001      	b.n	80015d6 <xTaskCheckForTimeOut+0x92>
		}
		else
		{
			xReturn = pdTRUE;
 80015d2:	2301      	movs	r3, #1
 80015d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80015d6:	f7fe ff57 	bl	8000488 <vPortExitCritical>

	return xReturn;
 80015da:	68fb      	ldr	r3, [r7, #12]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20001d24 	.word	0x20001d24
 80015e8:	20001d08 	.word	0x20001d08

080015ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
 80015f0:	4b03      	ldr	r3, [pc, #12]	; (8001600 <vTaskMissedYield+0x14>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	601a      	str	r2, [r3, #0]
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	20001d20 	.word	0x20001d20

08001604 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 800160c:	f000 f882 	bl	8001714 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 8001610:	4b04      	ldr	r3, [pc, #16]	; (8001624 <prvIdleTask+0x20>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d901      	bls.n	800161c <prvIdleTask+0x18>
			{
				taskYIELD();
 8001618:	f7fe ff18 	bl	800044c <vPortYieldFromISR>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800161c:	f000 fdd1 	bl	80021c2 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8001620:	e7f4      	b.n	800160c <prvIdleTask+0x8>
 8001622:	bf00      	nop
 8001624:	20001c30 	.word	0x20001c30

08001628 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
 8001634:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	3334      	adds	r3, #52	; 0x34
 800163a:	220a      	movs	r2, #10
 800163c:	68b9      	ldr	r1, [r7, #8]
 800163e:	4618      	mov	r0, r3
 8001640:	f000 ff10 	bl	8002464 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b04      	cmp	r3, #4
 8001650:	d901      	bls.n	8001656 <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 8001652:	2304      	movs	r3, #4
 8001654:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	641a      	str	r2, [r3, #64]	; 0x40
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	3304      	adds	r3, #4
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe fdfb 	bl	8000262 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	3318      	adds	r3, #24
 8001670:	4618      	mov	r0, r3
 8001672:	f7fe fdf6 	bl	8000262 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	68fa      	ldr	r2, [r7, #12]
 800167a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f1c3 0205 	rsb	r2, r3, #5
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	68fa      	ldr	r2, [r7, #12]
 800168a:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
 800168c:	bf00      	nop
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 800169a:	2300      	movs	r3, #0
 800169c:	607b      	str	r3, [r7, #4]
 800169e:	e00c      	b.n	80016ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	4613      	mov	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4a12      	ldr	r2, [pc, #72]	; (80016f4 <prvInitialiseTaskLists+0x60>)
 80016ac:	4413      	add	r3, r2
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7fe fdb8 	bl	8000224 <vListInitialise>
	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3301      	adds	r3, #1
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2b04      	cmp	r3, #4
 80016be:	d9ef      	bls.n	80016a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 80016c0:	480d      	ldr	r0, [pc, #52]	; (80016f8 <prvInitialiseTaskLists+0x64>)
 80016c2:	f7fe fdaf 	bl	8000224 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 80016c6:	480d      	ldr	r0, [pc, #52]	; (80016fc <prvInitialiseTaskLists+0x68>)
 80016c8:	f7fe fdac 	bl	8000224 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
 80016cc:	480c      	ldr	r0, [pc, #48]	; (8001700 <prvInitialiseTaskLists+0x6c>)
 80016ce:	f7fe fda9 	bl	8000224 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
 80016d2:	480c      	ldr	r0, [pc, #48]	; (8001704 <prvInitialiseTaskLists+0x70>)
 80016d4:	f7fe fda6 	bl	8000224 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
 80016d8:	480b      	ldr	r0, [pc, #44]	; (8001708 <prvInitialiseTaskLists+0x74>)
 80016da:	f7fe fda3 	bl	8000224 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <prvInitialiseTaskLists+0x78>)
 80016e0:	4a05      	ldr	r2, [pc, #20]	; (80016f8 <prvInitialiseTaskLists+0x64>)
 80016e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80016e4:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <prvInitialiseTaskLists+0x7c>)
 80016e6:	4a05      	ldr	r2, [pc, #20]	; (80016fc <prvInitialiseTaskLists+0x68>)
 80016e8:	601a      	str	r2, [r3, #0]
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20001c30 	.word	0x20001c30
 80016f8:	20001c94 	.word	0x20001c94
 80016fc:	20001ca8 	.word	0x20001ca8
 8001700:	20001cc4 	.word	0x20001cc4
 8001704:	20001cd8 	.word	0x20001cd8
 8001708:	20001cf0 	.word	0x20001cf0
 800170c:	20001cbc 	.word	0x20001cbc
 8001710:	20001cc0 	.word	0x20001cc0

08001714 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 800171a:	4b18      	ldr	r3, [pc, #96]	; (800177c <prvCheckTasksWaitingTermination+0x68>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d028      	beq.n	8001774 <prvCheckTasksWaitingTermination+0x60>
		{
			vTaskSuspendAll();
 8001722:	f7ff fc73 	bl	800100c <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001726:	4b16      	ldr	r3, [pc, #88]	; (8001780 <prvCheckTasksWaitingTermination+0x6c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	bf0c      	ite	eq
 800172e:	2301      	moveq	r3, #1
 8001730:	2300      	movne	r3, #0
 8001732:	b2db      	uxtb	r3, r3
 8001734:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
 8001736:	f7ff fc77 	bl	8001028 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d119      	bne.n	8001774 <prvCheckTasksWaitingTermination+0x60>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 8001740:	f7fe fe90 	bl	8000464 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 8001744:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <prvCheckTasksWaitingTermination+0x6c>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	3304      	adds	r3, #4
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe fdf1 	bl	8000338 <vListRemove>
					--uxCurrentNumberOfTasks;
 8001756:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <prvCheckTasksWaitingTermination+0x70>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	3b01      	subs	r3, #1
 800175c:	4a09      	ldr	r2, [pc, #36]	; (8001784 <prvCheckTasksWaitingTermination+0x70>)
 800175e:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <prvCheckTasksWaitingTermination+0x68>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	3b01      	subs	r3, #1
 8001766:	4a05      	ldr	r2, [pc, #20]	; (800177c <prvCheckTasksWaitingTermination+0x68>)
 8001768:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 800176a:	f7fe fe8d 	bl	8000488 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 800176e:	6838      	ldr	r0, [r7, #0]
 8001770:	f000 f871 	bl	8001856 <prvDeleteTCB>
			}
		}
	}
	#endif
}
 8001774:	bf00      	nop
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20001cec 	.word	0x20001cec
 8001780:	20001cd8 	.word	0x20001cd8
 8001784:	20001d04 	.word	0x20001d04

08001788 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8001790:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <prvAddCurrentTaskToDelayedList+0x58>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <prvAddCurrentTaskToDelayedList+0x5c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d209      	bcs.n	80017b6 <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 80017a2:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <prvAddCurrentTaskToDelayedList+0x60>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <prvAddCurrentTaskToDelayedList+0x58>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	3304      	adds	r3, #4
 80017ac:	4619      	mov	r1, r3
 80017ae:	4610      	mov	r0, r2
 80017b0:	f7fe fd8a 	bl	80002c8 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
		{
			xNextTaskUnblockTime = xTimeToWake;
		}
	}
}
 80017b4:	e010      	b.n	80017d8 <prvAddCurrentTaskToDelayedList+0x50>
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 80017b6:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <prvAddCurrentTaskToDelayedList+0x64>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <prvAddCurrentTaskToDelayedList+0x58>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	3304      	adds	r3, #4
 80017c0:	4619      	mov	r1, r3
 80017c2:	4610      	mov	r0, r2
 80017c4:	f7fe fd80 	bl	80002c8 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 80017c8:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <prvAddCurrentTaskToDelayedList+0x68>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d202      	bcs.n	80017d8 <prvAddCurrentTaskToDelayedList+0x50>
			xNextTaskUnblockTime = xTimeToWake;
 80017d2:	4a07      	ldr	r2, [pc, #28]	; (80017f0 <prvAddCurrentTaskToDelayedList+0x68>)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6013      	str	r3, [r2, #0]
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20001c2c 	.word	0x20001c2c
 80017e4:	20001d08 	.word	0x20001d08
 80017e8:	20001cc0 	.word	0x20001cc0
 80017ec:	20001cbc 	.word	0x20001cbc
 80017f0:	20000004 	.word	0x20000004

080017f4 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	6039      	str	r1, [r7, #0]
 80017fe:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 8001800:	2044      	movs	r0, #68	; 0x44
 8001802:	f7fe fea3 	bl	800054c <pvPortMalloc>
 8001806:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d01e      	beq.n	800184c <prvAllocateTCBAndStack+0x58>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d106      	bne.n	8001822 <prvAllocateTCBAndStack+0x2e>
 8001814:	88fb      	ldrh	r3, [r7, #6]
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4618      	mov	r0, r3
 800181a:	f7fe fe97 	bl	800054c <pvPortMalloc>
 800181e:	4603      	mov	r3, r0
 8001820:	e000      	b.n	8001824 <prvAllocateTCBAndStack+0x30>
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182c:	2b00      	cmp	r3, #0
 800182e:	d105      	bne.n	800183c <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 8001830:	68f8      	ldr	r0, [r7, #12]
 8001832:	f7fe fec7 	bl	80005c4 <vPortFree>
			pxNewTCB = NULL;
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	e007      	b.n	800184c <prvAllocateTCBAndStack+0x58>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001840:	88fb      	ldrh	r3, [r7, #6]
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	461a      	mov	r2, r3
 8001846:	21a5      	movs	r1, #165	; 0xa5
 8001848:	f000 fe04 	bl	8002454 <memset>
		}
	}

	return pxNewTCB;
 800184c:	68fb      	ldr	r3, [r7, #12]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4618      	mov	r0, r3
 8001864:	f7fe feae 	bl	80005c4 <vPortFree>
		vPortFree( pxTCB );
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7fe feab 	bl	80005c4 <vPortFree>
	}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800187e:	4b04      	ldr	r3, [pc, #16]	; (8001890 <xTaskGetCurrentTaskHandle+0x18>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	607b      	str	r3, [r7, #4]

		return xReturn;
 8001884:	687b      	ldr	r3, [r7, #4]
	}
 8001886:	4618      	mov	r0, r3
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr
 8001890:	20001c2c 	.word	0x20001c2c

08001894 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
 800189a:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <xTaskGetSchedulerState+0x34>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d102      	bne.n	80018a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80018a2:	2300      	movs	r3, #0
 80018a4:	607b      	str	r3, [r7, #4]
 80018a6:	e008      	b.n	80018ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <xTaskGetSchedulerState+0x38>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d102      	bne.n	80018b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80018b0:	2301      	movs	r3, #1
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	e001      	b.n	80018ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80018b6:	2302      	movs	r3, #2
 80018b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80018ba:	687b      	ldr	r3, [r7, #4]
	}
 80018bc:	4618      	mov	r0, r3
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	20001d14 	.word	0x20001d14
 80018cc:	20001d18 	.word	0x20001d18

080018d0 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d104      	bne.n	80018ec <vTaskPriorityInherit+0x1c>
 80018e2:	f04f 0050 	mov.w	r0, #80	; 0x50
 80018e6:	f380 8811 	msr	BASEPRI, r0
 80018ea:	e7fe      	b.n	80018ea <vTaskPriorityInherit+0x1a>

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018f0:	4b21      	ldr	r3, [pc, #132]	; (8001978 <vTaskPriorityInherit+0xa8>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d23a      	bcs.n	8001970 <vTaskPriorityInherit+0xa0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
 80018fa:	4b1f      	ldr	r3, [pc, #124]	; (8001978 <vTaskPriorityInherit+0xa8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001900:	f1c3 0205 	rsb	r2, r3, #5
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6959      	ldr	r1, [r3, #20]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001910:	4613      	mov	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4a18      	ldr	r2, [pc, #96]	; (800197c <vTaskPriorityInherit+0xac>)
 800191a:	4413      	add	r3, r2
 800191c:	4299      	cmp	r1, r3
 800191e:	d122      	bne.n	8001966 <vTaskPriorityInherit+0x96>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	3304      	adds	r3, #4
 8001924:	4618      	mov	r0, r3
 8001926:	f7fe fd07 	bl	8000338 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800192a:	4b13      	ldr	r3, [pc, #76]	; (8001978 <vTaskPriorityInherit+0xa8>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001938:	4b11      	ldr	r3, [pc, #68]	; (8001980 <vTaskPriorityInherit+0xb0>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	429a      	cmp	r2, r3
 800193e:	d903      	bls.n	8001948 <vTaskPriorityInherit+0x78>
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001944:	4a0e      	ldr	r2, [pc, #56]	; (8001980 <vTaskPriorityInherit+0xb0>)
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4a09      	ldr	r2, [pc, #36]	; (800197c <vTaskPriorityInherit+0xac>)
 8001956:	441a      	add	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	3304      	adds	r3, #4
 800195c:	4619      	mov	r1, r3
 800195e:	4610      	mov	r0, r2
 8001960:	f7fe fc8b 	bl	800027a <vListInsertEnd>
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
 8001964:	e004      	b.n	8001970 <vTaskPriorityInherit+0xa0>
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001966:	4b04      	ldr	r3, [pc, #16]	; (8001978 <vTaskPriorityInherit+0xa8>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8001970:	bf00      	nop
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20001c2c 	.word	0x20001c2c
 800197c:	20001c30 	.word	0x20001c30
 8001980:	20001d10 	.word	0x20001d10

08001984 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d02c      	beq.n	80019f0 <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	429a      	cmp	r2, r3
 80019a0:	d026      	beq.n	80019f0 <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	3304      	adds	r3, #4
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fcc6 	bl	8000338 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b8:	f1c3 0205 	rsb	r2, r3, #5
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <vTaskPriorityDisinherit+0x74>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d903      	bls.n	80019d4 <vTaskPriorityDisinherit+0x50>
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d0:	4a09      	ldr	r2, [pc, #36]	; (80019f8 <vTaskPriorityDisinherit+0x74>)
 80019d2:	6013      	str	r3, [r2, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019d8:	4613      	mov	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4a06      	ldr	r2, [pc, #24]	; (80019fc <vTaskPriorityDisinherit+0x78>)
 80019e2:	441a      	add	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	3304      	adds	r3, #4
 80019e8:	4619      	mov	r1, r3
 80019ea:	4610      	mov	r0, r2
 80019ec:	f7fe fc45 	bl	800027a <vListInsertEnd>
			}
		}
	}
 80019f0:	bf00      	nop
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20001d10 	.word	0x20001d10
 80019fc:	20001c30 	.word	0x20001c30

08001a00 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8001a0a:	f000 fa7d 	bl	8001f08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8001a0e:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <xTimerCreateTimerTask+0x50>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00e      	beq.n	8001a34 <xTimerCreateTimerTask+0x34>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );	
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 8001a16:	2300      	movs	r3, #0
 8001a18:	9303      	str	r3, [sp, #12]
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	9302      	str	r3, [sp, #8]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	9301      	str	r3, [sp, #4]
 8001a22:	2303      	movs	r3, #3
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	2300      	movs	r3, #0
 8001a28:	2246      	movs	r2, #70	; 0x46
 8001a2a:	490a      	ldr	r1, [pc, #40]	; (8001a54 <xTimerCreateTimerTask+0x54>)
 8001a2c:	480a      	ldr	r0, [pc, #40]	; (8001a58 <xTimerCreateTimerTask+0x58>)
 8001a2e:	f7ff f987 	bl	8000d40 <xTaskGenericCreate>
 8001a32:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d104      	bne.n	8001a44 <xTimerCreateTimerTask+0x44>
 8001a3a:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001a3e:	f380 8811 	msr	BASEPRI, r0
 8001a42:	e7fe      	b.n	8001a42 <xTimerCreateTimerTask+0x42>
	return xReturn;
 8001a44:	687b      	ldr	r3, [r7, #4]
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20001d5c 	.word	0x20001d5c
 8001a54:	08002498 	.word	0x08002498
 8001a58:	08001bbd 	.word	0x08001bbd

08001a5c <xTimerCreate>:
/*-----------------------------------------------------------*/

xTimerHandle xTimerCreate( const signed char *pcTimerName, portTickType xTimerPeriodInTicks, unsigned portBASE_TYPE uxAutoReload, void *pvTimerID, tmrTIMER_CALLBACK pxCallbackFunction )
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
 8001a68:	603b      	str	r3, [r7, #0]
xTIMER *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( portTickType ) 0U )
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d109      	bne.n	8001a84 <xTimerCreate+0x28>
	{
		pxNewTimer = NULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
		configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d121      	bne.n	8001abe <xTimerCreate+0x62>
 8001a7a:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001a7e:	f380 8811 	msr	BASEPRI, r0
 8001a82:	e7fe      	b.n	8001a82 <xTimerCreate+0x26>
	}
	else
	{
		pxNewTimer = ( xTIMER * ) pvPortMalloc( sizeof( xTIMER ) );
 8001a84:	2028      	movs	r0, #40	; 0x28
 8001a86:	f7fe fd61 	bl	800054c <pvPortMalloc>
 8001a8a:	6178      	str	r0, [r7, #20]
		if( pxNewTimer != NULL )
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d015      	beq.n	8001abe <xTimerCreate+0x62>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
 8001a92:	f000 fa39 	bl	8001f08 <prvCheckForValidListAndQueue>
	
			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	601a      	str	r2, [r3, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	619a      	str	r2, [r3, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	61da      	str	r2, [r3, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	621a      	str	r2, [r3, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	6a3a      	ldr	r2, [r7, #32]
 8001ab2:	625a      	str	r2, [r3, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	3304      	adds	r3, #4
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7fe fbd2 	bl	8000262 <vListInitialiseItem>
		{
			traceTIMER_CREATE_FAILED();
		}
	}
	
	return ( xTimerHandle ) pxNewTimer;
 8001abe:	697b      	ldr	r3, [r7, #20]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b088      	sub	sp, #32
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
 8001ad4:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8001ada:	4b1a      	ldr	r3, [pc, #104]	; (8001b44 <xTimerGenericCommand+0x7c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d02a      	beq.n	8001b38 <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d118      	bne.n	8001b26 <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8001af4:	f7ff fece 	bl	8001894 <xTaskGetSchedulerState>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d109      	bne.n	8001b12 <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
 8001afe:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <xTimerGenericCommand+0x7c>)
 8001b00:	6818      	ldr	r0, [r3, #0]
 8001b02:	f107 0110 	add.w	r1, r7, #16
 8001b06:	2300      	movs	r3, #0
 8001b08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b0a:	f7fe fe09 	bl	8000720 <xQueueGenericSend>
 8001b0e:	61f8      	str	r0, [r7, #28]
 8001b10:	e012      	b.n	8001b38 <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8001b12:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <xTimerGenericCommand+0x7c>)
 8001b14:	6818      	ldr	r0, [r3, #0]
 8001b16:	f107 0110 	add.w	r1, r7, #16
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f7fe fdff 	bl	8000720 <xQueueGenericSend>
 8001b22:	61f8      	str	r0, [r7, #28]
 8001b24:	e008      	b.n	8001b38 <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8001b26:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <xTimerGenericCommand+0x7c>)
 8001b28:	6818      	ldr	r0, [r3, #0]
 8001b2a:	f107 0110 	add.w	r1, r7, #16
 8001b2e:	2300      	movs	r3, #0
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	f7fe fe91 	bl	8000858 <xQueueGenericSendFromISR>
 8001b36:	61f8      	str	r0, [r7, #28]
		}
		
		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}
	
	return xReturn;
 8001b38:	69fb      	ldr	r3, [r7, #28]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3720      	adds	r7, #32
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20001d5c 	.word	0x20001d5c

08001b48 <prvProcessExpiredTimer>:
	
#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af02      	add	r7, sp, #8
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001b52:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <prvProcessExpiredTimer+0x70>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	60fb      	str	r3, [r7, #12]
	vListRemove( &( pxTimer->xTimerListItem ) );
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	3304      	adds	r3, #4
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fbe9 	bl	8000338 <vListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d11c      	bne.n	8001ba8 <prvProcessExpiredTimer+0x60>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	699a      	ldr	r2, [r3, #24]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	18d1      	adds	r1, r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 f8ac 	bl	8001cd8 <prvInsertTimerInActiveList>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d110      	bne.n	8001ba8 <prvProcessExpiredTimer+0x60>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8001b86:	2300      	movs	r3, #0
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	2100      	movs	r1, #0
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	f7ff ff99 	bl	8001ac8 <xTimerGenericCommand>
 8001b96:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d104      	bne.n	8001ba8 <prvProcessExpiredTimer+0x60>
 8001b9e:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001ba2:	f380 8811 	msr	BASEPRI, r0
 8001ba6:	e7fe      	b.n	8001ba6 <prvProcessExpiredTimer+0x5e>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	4798      	blx	r3
}
 8001bb0:	bf00      	nop
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20001d54 	.word	0x20001d54

08001bbc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001bc4:	f107 0308 	add.w	r3, r7, #8
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f000 f83f 	bl	8001c4c <prvGetNextExpireTime>
 8001bce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f000 f803 	bl	8001be0 <prvProcessTimerOrBlockTask>
		
		/* Empty the command queue. */
		prvProcessReceivedCommands();		
 8001bda:	f000 f8bf 	bl	8001d5c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001bde:	e7f1      	b.n	8001bc4 <prvTimerTask+0x8>

08001be0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
 8001bea:	f7ff fa0f 	bl	800100c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001bee:	f107 0308 	add.w	r3, r7, #8
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f000 f84e 	bl	8001c94 <prvSampleTimeNow>
 8001bf8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d11d      	bne.n	8001c3c <prvProcessTimerOrBlockTask+0x5c>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d10a      	bne.n	8001c1c <prvProcessTimerOrBlockTask+0x3c>
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d806      	bhi.n	8001c1c <prvProcessTimerOrBlockTask+0x3c>
			{
				xTaskResumeAll();
 8001c0e:	f7ff fa0b 	bl	8001028 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8001c12:	68f9      	ldr	r1, [r7, #12]
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f7ff ff97 	bl	8001b48 <prvProcessExpiredTimer>
		else
		{
			xTaskResumeAll();
		}
	}
}
 8001c1a:	e011      	b.n	8001c40 <prvProcessTimerOrBlockTask+0x60>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 8001c1c:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <prvProcessTimerOrBlockTask+0x68>)
 8001c1e:	6818      	ldr	r0, [r3, #0]
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	4619      	mov	r1, r3
 8001c28:	f7ff f860 	bl	8000cec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8001c2c:	f7ff f9fc 	bl	8001028 <xTaskResumeAll>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d104      	bne.n	8001c40 <prvProcessTimerOrBlockTask+0x60>
					portYIELD_WITHIN_API();
 8001c36:	f7fe fc09 	bl	800044c <vPortYieldFromISR>
}
 8001c3a:	e001      	b.n	8001c40 <prvProcessTimerOrBlockTask+0x60>
			xTaskResumeAll();
 8001c3c:	f7ff f9f4 	bl	8001028 <xTaskResumeAll>
}
 8001c40:	bf00      	nop
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20001d5c 	.word	0x20001d5c

08001c4c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001c54:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <prvGetNextExpireTime+0x44>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	bf0c      	ite	eq
 8001c5e:	2301      	moveq	r3, #1
 8001c60:	2300      	movne	r3, #0
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	461a      	mov	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d105      	bne.n	8001c7e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001c72:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <prvGetNextExpireTime+0x44>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	e001      	b.n	8001c82 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8001c82:	68fb      	ldr	r3, [r7, #12]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	20001d54 	.word	0x20001d54

08001c94 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
 8001c9c:	f7ff fa48 	bl	8001130 <xTaskGetTickCount>
 8001ca0:	60f8      	str	r0, [r7, #12]
	
	if( xTimeNow < xLastTime )
 8001ca2:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <prvSampleTimeNow+0x40>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d208      	bcs.n	8001cbe <prvSampleTimeNow+0x2a>
	{
		prvSwitchTimerLists( xLastTime );
 8001cac:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <prvSampleTimeNow+0x40>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f000 f8cd 	bl	8001e50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	e002      	b.n	8001cc4 <prvSampleTimeNow+0x30>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
	}
	
	xLastTime = xTimeNow;
 8001cc4:	4a03      	ldr	r2, [pc, #12]	; (8001cd4 <prvSampleTimeNow+0x40>)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6013      	str	r3, [r2, #0]
	
	return xTimeNow;
 8001cca:	68fb      	ldr	r3, [r7, #12]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20001d60 	.word	0x20001d60

08001cd8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
 8001ce4:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	68ba      	ldr	r2, [r7, #8]
 8001cee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	611a      	str	r2, [r3, #16]
	
	if( xNextExpiryTime <= xTimeNow )
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d812      	bhi.n	8001d24 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	1ad2      	subs	r2, r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d302      	bcc.n	8001d12 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	e01b      	b.n	8001d4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8001d12:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <prvInsertTimerInActiveList+0x7c>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	3304      	adds	r3, #4
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	f7fe fad3 	bl	80002c8 <vListInsert>
 8001d22:	e012      	b.n	8001d4a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d206      	bcs.n	8001d3a <prvInsertTimerInActiveList+0x62>
 8001d2c:	68ba      	ldr	r2, [r7, #8]
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d302      	bcc.n	8001d3a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8001d34:	2301      	movs	r3, #1
 8001d36:	617b      	str	r3, [r7, #20]
 8001d38:	e007      	b.n	8001d4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001d3a:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <prvInsertTimerInActiveList+0x80>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	3304      	adds	r3, #4
 8001d42:	4619      	mov	r1, r3
 8001d44:	4610      	mov	r0, r2
 8001d46:	f7fe fabf 	bl	80002c8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8001d4a:	697b      	ldr	r3, [r7, #20]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20001d58 	.word	0x20001d58
 8001d58:	20001d54 	.word	0x20001d54

08001d5c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08a      	sub	sp, #40	; 0x28
 8001d60:	af02      	add	r7, sp, #8
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001d62:	1d3b      	adds	r3, r7, #4
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff ff95 	bl	8001c94 <prvSampleTimeNow>
 8001d6a:	61f8      	str	r0, [r7, #28]

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8001d6c:	e05f      	b.n	8001e2e <prvProcessReceivedCommands+0xd2>
	{
		pxTimer = xMessage.pxTimer;
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	61bb      	str	r3, [r7, #24]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d008      	beq.n	8001d8a <prvProcessReceivedCommands+0x2e>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	695b      	ldr	r3, [r3, #20]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d004      	beq.n	8001d8a <prvProcessReceivedCommands+0x2e>
			{
				/* The timer is in a list, remove it. */
				vListRemove( &( pxTimer->xTimerListItem ) );
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	3304      	adds	r3, #4
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe fad7 	bl	8000338 <vListRemove>
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );
		
		switch( xMessage.xMessageID )
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	2b03      	cmp	r3, #3
 8001d8e:	d84d      	bhi.n	8001e2c <prvProcessReceivedCommands+0xd0>
 8001d90:	a201      	add	r2, pc, #4	; (adr r2, 8001d98 <prvProcessReceivedCommands+0x3c>)
 8001d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d96:	bf00      	nop
 8001d98:	08001da9 	.word	0x08001da9
 8001d9c:	08001e2f 	.word	0x08001e2f
 8001da0:	08001df9 	.word	0x08001df9
 8001da4:	08001e25 	.word	0x08001e25
		{
			case tmrCOMMAND_START :	
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	18d1      	adds	r1, r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	69fa      	ldr	r2, [r7, #28]
 8001db4:	69b8      	ldr	r0, [r7, #24]
 8001db6:	f7ff ff8f 	bl	8001cd8 <prvInsertTimerInActiveList>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d136      	bne.n	8001e2e <prvProcessReceivedCommands+0xd2>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	69b8      	ldr	r0, [r7, #24]
 8001dc6:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d12e      	bne.n	8001e2e <prvProcessReceivedCommands+0xd2>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	441a      	add	r2, r3
 8001dd8:	2300      	movs	r3, #0
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	2300      	movs	r3, #0
 8001dde:	2100      	movs	r1, #0
 8001de0:	69b8      	ldr	r0, [r7, #24]
 8001de2:	f7ff fe71 	bl	8001ac8 <xTimerGenericCommand>
 8001de6:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d11f      	bne.n	8001e2e <prvProcessReceivedCommands+0xd2>
 8001dee:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001df2:	f380 8811 	msr	BASEPRI, r0
 8001df6:	e7fe      	b.n	8001df6 <prvProcessReceivedCommands+0x9a>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d104      	bne.n	8001e10 <prvProcessReceivedCommands+0xb4>
 8001e06:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001e0a:	f380 8811 	msr	BASEPRI, r0
 8001e0e:	e7fe      	b.n	8001e0e <prvProcessReceivedCommands+0xb2>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	699a      	ldr	r2, [r3, #24]
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	18d1      	adds	r1, r2, r3
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	69fa      	ldr	r2, [r7, #28]
 8001e1c:	69b8      	ldr	r0, [r7, #24]
 8001e1e:	f7ff ff5b 	bl	8001cd8 <prvInsertTimerInActiveList>
				break;
 8001e22:	e004      	b.n	8001e2e <prvProcessReceivedCommands+0xd2>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
 8001e24:	69b8      	ldr	r0, [r7, #24]
 8001e26:	f7fe fbcd 	bl	80005c4 <vPortFree>
				break;
 8001e2a:	e000      	b.n	8001e2e <prvProcessReceivedCommands+0xd2>

			default	:			
				/* Don't expect to get here. */
				break;
 8001e2c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8001e2e:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <prvProcessReceivedCommands+0xf0>)
 8001e30:	6818      	ldr	r0, [r3, #0]
 8001e32:	f107 0108 	add.w	r1, r7, #8
 8001e36:	2300      	movs	r3, #0
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f7fe fd69 	bl	8000910 <xQueueGenericReceive>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d194      	bne.n	8001d6e <prvProcessReceivedCommands+0x12>
		}
	}
}
 8001e44:	bf00      	nop
 8001e46:	3720      	adds	r7, #32
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20001d5c 	.word	0x20001d5c

08001e50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08a      	sub	sp, #40	; 0x28
 8001e54:	af02      	add	r7, sp, #8
 8001e56:	6078      	str	r0, [r7, #4]
	
	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001e58:	e03f      	b.n	8001eda <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001e5a:	4b29      	ldr	r3, [pc, #164]	; (8001f00 <prvSwitchTimerLists+0xb0>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001e64:	4b26      	ldr	r3, [pc, #152]	; (8001f00 <prvSwitchTimerLists+0xb0>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	61bb      	str	r3, [r7, #24]
		vListRemove( &( pxTimer->xTimerListItem ) );
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	3304      	adds	r3, #4
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe fa60 	bl	8000338 <vListRemove>

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	69b8      	ldr	r0, [r7, #24]
 8001e7e:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	69db      	ldr	r3, [r3, #28]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d128      	bne.n	8001eda <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	699a      	ldr	r2, [r3, #24]
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	4413      	add	r3, r2
 8001e90:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d90e      	bls.n	8001eb8 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001ea6:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <prvSwitchTimerLists+0xb0>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	3304      	adds	r3, #4
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	f7fe fa09 	bl	80002c8 <vListInsert>
 8001eb6:	e010      	b.n	8001eda <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8001eb8:	2300      	movs	r3, #0
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	69fa      	ldr	r2, [r7, #28]
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	69b8      	ldr	r0, [r7, #24]
 8001ec4:	f7ff fe00 	bl	8001ac8 <xTimerGenericCommand>
 8001ec8:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d104      	bne.n	8001eda <prvSwitchTimerLists+0x8a>
 8001ed0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001ed4:	f380 8811 	msr	BASEPRI, r0
 8001ed8:	e7fe      	b.n	8001ed8 <prvSwitchTimerLists+0x88>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001eda:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <prvSwitchTimerLists+0xb0>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1ba      	bne.n	8001e5a <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <prvSwitchTimerLists+0xb0>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
 8001eea:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <prvSwitchTimerLists+0xb4>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <prvSwitchTimerLists+0xb0>)
 8001ef0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8001ef2:	4a04      	ldr	r2, [pc, #16]	; (8001f04 <prvSwitchTimerLists+0xb4>)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6013      	str	r3, [r2, #0]
}
 8001ef8:	bf00      	nop
 8001efa:	3720      	adds	r7, #32
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20001d54 	.word	0x20001d54
 8001f04:	20001d58 	.word	0x20001d58

08001f08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8001f0c:	f7fe faaa 	bl	8000464 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8001f10:	4b0d      	ldr	r3, [pc, #52]	; (8001f48 <prvCheckForValidListAndQueue+0x40>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d113      	bne.n	8001f40 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 8001f18:	480c      	ldr	r0, [pc, #48]	; (8001f4c <prvCheckForValidListAndQueue+0x44>)
 8001f1a:	f7fe f983 	bl	8000224 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8001f1e:	480c      	ldr	r0, [pc, #48]	; (8001f50 <prvCheckForValidListAndQueue+0x48>)
 8001f20:	f7fe f980 	bl	8000224 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8001f24:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <prvCheckForValidListAndQueue+0x4c>)
 8001f26:	4a09      	ldr	r2, [pc, #36]	; (8001f4c <prvCheckForValidListAndQueue+0x44>)
 8001f28:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8001f2a:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <prvCheckForValidListAndQueue+0x50>)
 8001f2c:	4a08      	ldr	r2, [pc, #32]	; (8001f50 <prvCheckForValidListAndQueue+0x48>)
 8001f2e:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
 8001f30:	2200      	movs	r2, #0
 8001f32:	210c      	movs	r1, #12
 8001f34:	2005      	movs	r0, #5
 8001f36:	f7fe fbb3 	bl	80006a0 <xQueueGenericCreate>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	4b02      	ldr	r3, [pc, #8]	; (8001f48 <prvCheckForValidListAndQueue+0x40>)
 8001f3e:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
 8001f40:	f7fe faa2 	bl	8000488 <vPortExitCritical>
}
 8001f44:	bf00      	nop
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	20001d5c 	.word	0x20001d5c
 8001f4c:	20001d2c 	.word	0x20001d2c
 8001f50:	20001d40 	.word	0x20001d40
 8001f54:	20001d54 	.word	0x20001d54
 8001f58:	20001d58 	.word	0x20001d58

08001f5c <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <NVIC_SetPriorityGrouping+0x44>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f78:	4013      	ands	r3, r2
 8001f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                 |
 8001f84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f8e:	4a04      	ldr	r2, [pc, #16]	; (8001fa0 <NVIC_SetPriorityGrouping+0x44>)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	60d3      	str	r3, [r2, #12]
}
 8001f94:	bf00      	nop
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <main>:
static volatile uint32_t ulCountOfReceivedSemaphores = 0;

/*-----------------------------------------------------------*/

int main(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af04      	add	r7, sp, #16
xTimerHandle xExampleSoftwareTimer = NULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	607b      	str	r3, [r7, #4]

	/* Configure the system ready to run the demo.  The clock configuration
	can be done here if it was not done before main() was called. */
	prvSetupHardware();
 8001fae:	f000 f914 	bl	80021da <prvSetupHardware>


	/* Create the queue used by the queue send and queue receive tasks.
	http://www.freertos.org/a00116.html */
	xQueue = xQueueCreate( 	mainQUEUE_LENGTH,		/* The number of items the queue can hold. */
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2104      	movs	r1, #4
 8001fb6:	2001      	movs	r0, #1
 8001fb8:	f7fe fb72 	bl	80006a0 <xQueueGenericCreate>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	4b31      	ldr	r3, [pc, #196]	; (8002084 <main+0xe0>)
 8001fc0:	601a      	str	r2, [r3, #0]
							sizeof( uint32_t ) );	/* The size of each item the queue holds. */
	/* Add to the registry, for the benefit of kernel aware debugging. */
	vQueueAddToRegistry( xQueue, ( signed char * ) "MainQueue" );
 8001fc2:	4b30      	ldr	r3, [pc, #192]	; (8002084 <main+0xe0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4930      	ldr	r1, [pc, #192]	; (8002088 <main+0xe4>)
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7fe fe67 	bl	8000c9c <vQueueAddToRegistry>


	/* Create the semaphore used by the FreeRTOS tick hook function and the
	event semaphore task. */
	vSemaphoreCreateBinary( xEventSemaphore );
 8001fce:	2203      	movs	r2, #3
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	2001      	movs	r0, #1
 8001fd4:	f7fe fb64 	bl	80006a0 <xQueueGenericCreate>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	4b2c      	ldr	r3, [pc, #176]	; (800208c <main+0xe8>)
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	4b2b      	ldr	r3, [pc, #172]	; (800208c <main+0xe8>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d006      	beq.n	8001ff4 <main+0x50>
 8001fe6:	4b29      	ldr	r3, [pc, #164]	; (800208c <main+0xe8>)
 8001fe8:	6818      	ldr	r0, [r3, #0]
 8001fea:	2300      	movs	r3, #0
 8001fec:	2200      	movs	r2, #0
 8001fee:	2100      	movs	r1, #0
 8001ff0:	f7fe fb96 	bl	8000720 <xQueueGenericSend>
	/* Add to the registry, for the benefit of kernel aware debugging. */
	vQueueAddToRegistry( xEventSemaphore, ( signed char * ) "xEventSemaphore" );
 8001ff4:	4b25      	ldr	r3, [pc, #148]	; (800208c <main+0xe8>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4925      	ldr	r1, [pc, #148]	; (8002090 <main+0xec>)
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fe4e 	bl	8000c9c <vQueueAddToRegistry>


	/* Create the queue receive task as described in the comments at the top
	of this	file.  http://www.freertos.org/a00125.html */
	xTaskCreate( 	prvQueueReceiveTask,			/* The function that implements the task. */
 8002000:	2300      	movs	r3, #0
 8002002:	9303      	str	r3, [sp, #12]
 8002004:	2300      	movs	r3, #0
 8002006:	9302      	str	r3, [sp, #8]
 8002008:	2300      	movs	r3, #0
 800200a:	9301      	str	r3, [sp, #4]
 800200c:	2302      	movs	r3, #2
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	2300      	movs	r3, #0
 8002012:	2246      	movs	r2, #70	; 0x46
 8002014:	491f      	ldr	r1, [pc, #124]	; (8002094 <main+0xf0>)
 8002016:	4820      	ldr	r0, [pc, #128]	; (8002098 <main+0xf4>)
 8002018:	f7fe fe92 	bl	8000d40 <xTaskGenericCreate>
					NULL );							/* Used to obtain a handle to the created task.  Not used in this simple demo, so set to NULL. */


	/* Create the queue send task in exactly the same way.  Again, this is
	described in the comments at the top of the file. */
	xTaskCreate( 	prvQueueSendTask,
 800201c:	2300      	movs	r3, #0
 800201e:	9303      	str	r3, [sp, #12]
 8002020:	2300      	movs	r3, #0
 8002022:	9302      	str	r3, [sp, #8]
 8002024:	2300      	movs	r3, #0
 8002026:	9301      	str	r3, [sp, #4]
 8002028:	2301      	movs	r3, #1
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	2300      	movs	r3, #0
 800202e:	2246      	movs	r2, #70	; 0x46
 8002030:	491a      	ldr	r1, [pc, #104]	; (800209c <main+0xf8>)
 8002032:	481b      	ldr	r0, [pc, #108]	; (80020a0 <main+0xfc>)
 8002034:	f7fe fe84 	bl	8000d40 <xTaskGenericCreate>
					NULL );


	/* Create the task that is synchronised with an interrupt using the
	xEventSemaphore semaphore. */
	xTaskCreate( 	prvEventSemaphoreTask,
 8002038:	2300      	movs	r3, #0
 800203a:	9303      	str	r3, [sp, #12]
 800203c:	2300      	movs	r3, #0
 800203e:	9302      	str	r3, [sp, #8]
 8002040:	2300      	movs	r3, #0
 8002042:	9301      	str	r3, [sp, #4]
 8002044:	2304      	movs	r3, #4
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	2300      	movs	r3, #0
 800204a:	2246      	movs	r2, #70	; 0x46
 800204c:	4915      	ldr	r1, [pc, #84]	; (80020a4 <main+0x100>)
 800204e:	4816      	ldr	r0, [pc, #88]	; (80020a8 <main+0x104>)
 8002050:	f7fe fe76 	bl	8000d40 <xTaskGenericCreate>
					NULL );


	/* Create the software timer as described in the comments at the top of
	this file.  http://www.freertos.org/FreeRTOS-timers-xTimerCreate.html. */
	xExampleSoftwareTimer = xTimerCreate( 	( const signed char * ) "LEDTimer", /* A text name, purely to help debugging. */
 8002054:	4b15      	ldr	r3, [pc, #84]	; (80020ac <main+0x108>)
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	2300      	movs	r3, #0
 800205a:	2201      	movs	r2, #1
 800205c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002060:	4813      	ldr	r0, [pc, #76]	; (80020b0 <main+0x10c>)
 8002062:	f7ff fcfb 	bl	8001a5c <xTimerCreate>
 8002066:	6078      	str	r0, [r7, #4]

	/* Start the created timer.  A block time of zero is used as the timer
	command queue cannot possibly be full here (this is the first timer to
	be created, and it is not yet running).
	http://www.freertos.org/FreeRTOS-timers-xTimerStart.html */
	xTimerStart( xExampleSoftwareTimer, 0 );
 8002068:	f7ff f862 	bl	8001130 <xTaskGetTickCount>
 800206c:	4602      	mov	r2, r0
 800206e:	2300      	movs	r3, #0
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	2300      	movs	r3, #0
 8002074:	2100      	movs	r1, #0
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7ff fd26 	bl	8001ac8 <xTimerGenericCommand>

	/* Start the tasks and timer running. */
	vTaskStartScheduler();
 800207c:	f7fe ff8a 	bl	8000f94 <vTaskStartScheduler>
	/* If all is well, the scheduler will now be running, and the following line
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details.  http://www.freertos.org/a00111.html */
	for( ;; );
 8002080:	e7fe      	b.n	8002080 <main+0xdc>
 8002082:	bf00      	nop
 8002084:	20001d64 	.word	0x20001d64
 8002088:	080024a0 	.word	0x080024a0
 800208c:	20001d68 	.word	0x20001d68
 8002090:	080024ac 	.word	0x080024ac
 8002094:	080024bc 	.word	0x080024bc
 8002098:	0800210d 	.word	0x0800210d
 800209c:	080024c0 	.word	0x080024c0
 80020a0:	080020d5 	.word	0x080020d5
 80020a4:	080024c4 	.word	0x080024c4
 80020a8:	08002141 	.word	0x08002141
 80020ac:	080020b5 	.word	0x080020b5
 80020b0:	080024c8 	.word	0x080024c8

080020b4 <vExampleTimerCallback>:
}
/*-----------------------------------------------------------*/

static void vExampleTimerCallback( xTimerHandle xTimer )
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
	/* The timer has expired.  Count the number of times this happens.  The
	timer that calls this function is an auto re-load timer, so it will
	execute periodically. http://www.freertos.org/RTOS-software-timer.html */
	ulCountOfTimerCallbackExecutions++;
 80020bc:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <vExampleTimerCallback+0x1c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	3301      	adds	r3, #1
 80020c2:	4a03      	ldr	r2, [pc, #12]	; (80020d0 <vExampleTimerCallback+0x1c>)
 80020c4:	6013      	str	r3, [r2, #0]
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr
 80020d0:	20001d6c 	.word	0x20001d6c

080020d4 <prvQueueSendTask>:
/*-----------------------------------------------------------*/

static void prvQueueSendTask( void *pvParameters )
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
portTickType xNextWakeTime;
const uint32_t ulValueToSend = 100UL;
 80020dc:	2364      	movs	r3, #100	; 0x64
 80020de:	60bb      	str	r3, [r7, #8]

	/* Initialise xNextWakeTime - this only needs to be done once. */
	xNextWakeTime = xTaskGetTickCount();
 80020e0:	f7ff f826 	bl	8001130 <xTaskGetTickCount>
 80020e4:	4603      	mov	r3, r0
 80020e6:	60fb      	str	r3, [r7, #12]
	{
		/* Place this task in the blocked state until it is time to run again.
		The block time is specified in ticks, the constant used converts ticks
		to ms.  While in the Blocked state this task will not consume any CPU
		time.  http://www.freertos.org/vtaskdelayuntil.html */
		vTaskDelayUntil( &xNextWakeTime, mainQUEUE_SEND_PERIOD_MS );
 80020e8:	f107 030c 	add.w	r3, r7, #12
 80020ec:	21c8      	movs	r1, #200	; 0xc8
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7fe fef4 	bl	8000edc <vTaskDelayUntil>

		/* Send to the queue - causing the queue receive task to unblock and
		increment its counter.  0 is used as the block time so the sending
		operation will not block - it shouldn't need to block as the queue
		should always be empty at this point in the code. */
		xQueueSend( xQueue, &ulValueToSend, 0 );
 80020f4:	4b04      	ldr	r3, [pc, #16]	; (8002108 <prvQueueSendTask+0x34>)
 80020f6:	6818      	ldr	r0, [r3, #0]
 80020f8:	f107 0108 	add.w	r1, r7, #8
 80020fc:	2300      	movs	r3, #0
 80020fe:	2200      	movs	r2, #0
 8002100:	f7fe fb0e 	bl	8000720 <xQueueGenericSend>
		vTaskDelayUntil( &xNextWakeTime, mainQUEUE_SEND_PERIOD_MS );
 8002104:	e7f0      	b.n	80020e8 <prvQueueSendTask+0x14>
 8002106:	bf00      	nop
 8002108:	20001d64 	.word	0x20001d64

0800210c <prvQueueReceiveTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvQueueReceiveTask( void *pvParameters )
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
	for( ;; )
	{
		/* Wait until something arrives in the queue - this task will block
		indefinitely provided INCLUDE_vTaskSuspend is set to 1 in
		FreeRTOSConfig.h.  http://www.freertos.org/a00118.html */
		xQueueReceive( xQueue, &ulReceivedValue, portMAX_DELAY );
 8002114:	4b08      	ldr	r3, [pc, #32]	; (8002138 <prvQueueReceiveTask+0x2c>)
 8002116:	6818      	ldr	r0, [r3, #0]
 8002118:	f107 010c 	add.w	r1, r7, #12
 800211c:	2300      	movs	r3, #0
 800211e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002122:	f7fe fbf5 	bl	8000910 <xQueueGenericReceive>

		/*  To get here something must have been received from the queue, but
		is it the expected value?  If it is, increment the counter. */
		if( ulReceivedValue == 100UL )
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2b64      	cmp	r3, #100	; 0x64
 800212a:	d1f3      	bne.n	8002114 <prvQueueReceiveTask+0x8>
		{
			/* Count the number of items that have been received correctly. */
			ulCountOfItemsReceivedOnQueue++;
 800212c:	4b03      	ldr	r3, [pc, #12]	; (800213c <prvQueueReceiveTask+0x30>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	3301      	adds	r3, #1
 8002132:	4a02      	ldr	r2, [pc, #8]	; (800213c <prvQueueReceiveTask+0x30>)
 8002134:	6013      	str	r3, [r2, #0]
		xQueueReceive( xQueue, &ulReceivedValue, portMAX_DELAY );
 8002136:	e7ed      	b.n	8002114 <prvQueueReceiveTask+0x8>
 8002138:	20001d64 	.word	0x20001d64
 800213c:	20001d70 	.word	0x20001d70

08002140 <prvEventSemaphoreTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvEventSemaphoreTask( void *pvParameters )
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
	for( ;; )
	{
		/* Block until the semaphore is 'given'. */
		xSemaphoreTake( xEventSemaphore, portMAX_DELAY );
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <prvEventSemaphoreTask+0x24>)
 800214a:	6818      	ldr	r0, [r3, #0]
 800214c:	2300      	movs	r3, #0
 800214e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002152:	2100      	movs	r1, #0
 8002154:	f7fe fbdc 	bl	8000910 <xQueueGenericReceive>

		/* Count the number of times the semaphore is received. */
		ulCountOfReceivedSemaphores++;
 8002158:	4b03      	ldr	r3, [pc, #12]	; (8002168 <prvEventSemaphoreTask+0x28>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	3301      	adds	r3, #1
 800215e:	4a02      	ldr	r2, [pc, #8]	; (8002168 <prvEventSemaphoreTask+0x28>)
 8002160:	6013      	str	r3, [r2, #0]
		xSemaphoreTake( xEventSemaphore, portMAX_DELAY );
 8002162:	e7f1      	b.n	8002148 <prvEventSemaphoreTask+0x8>
 8002164:	20001d68 	.word	0x20001d68
 8002168:	20001d74 	.word	0x20001d74

0800216c <vApplicationTickHook>:
	}
}
/*-----------------------------------------------------------*/

void vApplicationTickHook( void )
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8002172:	2300      	movs	r3, #0
 8002174:	607b      	str	r3, [r7, #4]

	/* The RTOS tick hook function is enabled by setting configUSE_TICK_HOOK to
	1 in FreeRTOSConfig.h.

	"Give" the semaphore on every 500th tick interrupt. */
	ulCount++;
 8002176:	4b0c      	ldr	r3, [pc, #48]	; (80021a8 <vApplicationTickHook+0x3c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	3301      	adds	r3, #1
 800217c:	4a0a      	ldr	r2, [pc, #40]	; (80021a8 <vApplicationTickHook+0x3c>)
 800217e:	6013      	str	r3, [r2, #0]
	if( ulCount >= 500UL )
 8002180:	4b09      	ldr	r3, [pc, #36]	; (80021a8 <vApplicationTickHook+0x3c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002188:	d309      	bcc.n	800219e <vApplicationTickHook+0x32>

		xHigherPriorityTaskWoken was initialised to pdFALSE, and will be set to
		pdTRUE by xSemaphoreGiveFromISR() if giving the semaphore unblocked a
		task that has equal or higher priority than the interrupted task.
		http://www.freertos.org/a00124.html */
		xSemaphoreGiveFromISR( xEventSemaphore, &xHigherPriorityTaskWoken );
 800218a:	4b08      	ldr	r3, [pc, #32]	; (80021ac <vApplicationTickHook+0x40>)
 800218c:	6818      	ldr	r0, [r3, #0]
 800218e:	1d3a      	adds	r2, r7, #4
 8002190:	2300      	movs	r3, #0
 8002192:	2100      	movs	r1, #0
 8002194:	f7fe fb60 	bl	8000858 <xQueueGenericSendFromISR>
		ulCount = 0UL;
 8002198:	4b03      	ldr	r3, [pc, #12]	; (80021a8 <vApplicationTickHook+0x3c>)
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
	are using.  http://www.freertos.org/a00090.html

	In this case, the function is running in the context of the tick interrupt,
	which will automatically check for the higher priority task to run anyway,
	so no further action is required. */
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20001d78 	.word	0x20001d78
 80021ac:	20001d68 	.word	0x20001d68

080021b0 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
	Called if a call to pvPortMalloc() fails because there is insufficient
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software 
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	for( ;; );
 80021b4:	e7fe      	b.n	80021b4 <vApplicationMallocFailedHook+0x4>

080021b6 <vApplicationStackOverflowHook>:
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
 80021be:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected.  pxCurrentTCB can be
	inspected in the debugger if the task name passed into this function is
	corrupt. */
	for( ;; );
 80021c0:	e7fe      	b.n	80021c0 <vApplicationStackOverflowHook+0xa>

080021c2 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b082      	sub	sp, #8
 80021c6:	af00      	add	r7, sp, #0
	FreeRTOSConfig.h.

	This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amount of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();
 80021c8:	f7fe fa06 	bl	80005d8 <xPortGetFreeHeapSize>
 80021cc:	4603      	mov	r3, r0
 80021ce:	607b      	str	r3, [r7, #4]

	if( xFreeStackSpace > 100 )
 80021d0:	687b      	ldr	r3, [r7, #4]
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <prvSetupHardware>:
/*-----------------------------------------------------------*/

static void prvSetupHardware( void )
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	af00      	add	r7, sp, #0
	/* Ensure all priority bits are assigned as preemption priority bits.
	http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	NVIC_SetPriorityGrouping( 0 );
 80021de:	2000      	movs	r0, #0
 80021e0:	f7ff febc 	bl	8001f5c <NVIC_SetPriorityGrouping>

	/* TODO: Setup the clocks, etc. here, if they were not configured before
	main() was called. */
}
 80021e4:	bf00      	nop
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80021e8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80021ea:	e003      	b.n	80021f4 <LoopCopyDataInit>

080021ec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <LoopFillZerobss+0x14>)
	ldr	r3, [r3, r1]
 80021ee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80021f0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80021f2:	3104      	adds	r1, #4

080021f4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80021f4:	480a      	ldr	r0, [pc, #40]	; (8002220 <LoopFillZerobss+0x18>)
	ldr	r3, =_edata
 80021f6:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <LoopFillZerobss+0x1c>)
	adds	r2, r0, r1
 80021f8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80021fa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80021fc:	d3f6      	bcc.n	80021ec <CopyDataInit>
	ldr	r2, =_sbss
 80021fe:	4a0a      	ldr	r2, [pc, #40]	; (8002228 <LoopFillZerobss+0x20>)
	b	LoopFillZerobss
 8002200:	e002      	b.n	8002208 <LoopFillZerobss>

08002202 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002202:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002204:	f842 3b04 	str.w	r3, [r2], #4

08002208 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002208:	4b08      	ldr	r3, [pc, #32]	; (800222c <LoopFillZerobss+0x24>)
	cmp	r2, r3
 800220a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800220c:	d3f9      	bcc.n	8002202 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800220e:	f000 f829 	bl	8002264 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002212:	f000 f8e1 	bl	80023d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002216:	f7ff fec5 	bl	8001fa4 <main>
	bx	lr
 800221a:	4770      	bx	lr
	ldr	r3, =_sidata
 800221c:	08002508 	.word	0x08002508
	ldr	r0, =_sdata
 8002220:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002224:	20000008 	.word	0x20000008
	ldr	r2, =_sbss
 8002228:	20000008 	.word	0x20000008
	ldr	r3, = _ebss
 800222c:	20001dfc 	.word	0x20001dfc

08002230 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002230:	e7fe      	b.n	8002230 <ADC1_2_IRQHandler>

08002232 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0
}
 8002236:	bf00      	nop
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr

0800223e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800223e:	b480      	push	{r7}
 8002240:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002242:	e7fe      	b.n	8002242 <HardFault_Handler+0x4>

08002244 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002248:	e7fe      	b.n	8002248 <MemManage_Handler+0x4>

0800224a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800224a:	b480      	push	{r7}
 800224c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800224e:	e7fe      	b.n	800224e <BusFault_Handler+0x4>

08002250 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002254:	e7fe      	b.n	8002254 <UsageFault_Handler+0x4>

08002256 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002256:	b480      	push	{r7}
 8002258:	af00      	add	r7, sp, #0
}
 800225a:	bf00      	nop
 800225c:	46bd      	mov	sp, r7
 800225e:	bc80      	pop	{r7}
 8002260:	4770      	bx	lr
	...

08002264 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002268:	4a15      	ldr	r2, [pc, #84]	; (80022c0 <SystemInit+0x5c>)
 800226a:	4b15      	ldr	r3, [pc, #84]	; (80022c0 <SystemInit+0x5c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8002274:	4912      	ldr	r1, [pc, #72]	; (80022c0 <SystemInit+0x5c>)
 8002276:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <SystemInit+0x5c>)
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	4b12      	ldr	r3, [pc, #72]	; (80022c4 <SystemInit+0x60>)
 800227c:	4013      	ands	r3, r2
 800227e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002280:	4a0f      	ldr	r2, [pc, #60]	; (80022c0 <SystemInit+0x5c>)
 8002282:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <SystemInit+0x5c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800228a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800228e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002290:	4a0b      	ldr	r2, [pc, #44]	; (80022c0 <SystemInit+0x5c>)
 8002292:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <SystemInit+0x5c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800229a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800229c:	4a08      	ldr	r2, [pc, #32]	; (80022c0 <SystemInit+0x5c>)
 800229e:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <SystemInit+0x5c>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80022a6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80022a8:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <SystemInit+0x5c>)
 80022aa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80022ae:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80022b0:	f000 f80c 	bl	80022cc <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80022b4:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <SystemInit+0x64>)
 80022b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022ba:	609a      	str	r2, [r3, #8]
#endif 
}
 80022bc:	bf00      	nop
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40021000 	.word	0x40021000
 80022c4:	f8ff0000 	.word	0xf8ff0000
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80022d0:	f000 f802 	bl	80022d8 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80022d4:	bf00      	nop
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80022de:	2300      	movs	r3, #0
 80022e0:	607b      	str	r3, [r7, #4]
 80022e2:	2300      	movs	r3, #0
 80022e4:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80022e6:	4a3a      	ldr	r2, [pc, #232]	; (80023d0 <SetSysClockTo72+0xf8>)
 80022e8:	4b39      	ldr	r3, [pc, #228]	; (80023d0 <SetSysClockTo72+0xf8>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80022f2:	4b37      	ldr	r3, [pc, #220]	; (80023d0 <SetSysClockTo72+0xf8>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fa:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3301      	adds	r3, #1
 8002300:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d103      	bne.n	8002310 <SetSysClockTo72+0x38>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800230e:	d1f0      	bne.n	80022f2 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002310:	4b2f      	ldr	r3, [pc, #188]	; (80023d0 <SetSysClockTo72+0xf8>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d002      	beq.n	8002322 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800231c:	2301      	movs	r3, #1
 800231e:	603b      	str	r3, [r7, #0]
 8002320:	e001      	b.n	8002326 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002322:	2300      	movs	r3, #0
 8002324:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d14b      	bne.n	80023c4 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 800232c:	4a29      	ldr	r2, [pc, #164]	; (80023d4 <SetSysClockTo72+0xfc>)
 800232e:	4b29      	ldr	r3, [pc, #164]	; (80023d4 <SetSysClockTo72+0xfc>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f043 0310 	orr.w	r3, r3, #16
 8002336:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8002338:	4a26      	ldr	r2, [pc, #152]	; (80023d4 <SetSysClockTo72+0xfc>)
 800233a:	4b26      	ldr	r3, [pc, #152]	; (80023d4 <SetSysClockTo72+0xfc>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f023 0303 	bic.w	r3, r3, #3
 8002342:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8002344:	4a23      	ldr	r2, [pc, #140]	; (80023d4 <SetSysClockTo72+0xfc>)
 8002346:	4b23      	ldr	r3, [pc, #140]	; (80023d4 <SetSysClockTo72+0xfc>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f043 0302 	orr.w	r3, r3, #2
 800234e:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8002350:	4a1f      	ldr	r2, [pc, #124]	; (80023d0 <SetSysClockTo72+0xf8>)
 8002352:	4b1f      	ldr	r3, [pc, #124]	; (80023d0 <SetSysClockTo72+0xf8>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8002358:	4a1d      	ldr	r2, [pc, #116]	; (80023d0 <SetSysClockTo72+0xf8>)
 800235a:	4b1d      	ldr	r3, [pc, #116]	; (80023d0 <SetSysClockTo72+0xf8>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8002360:	4a1b      	ldr	r2, [pc, #108]	; (80023d0 <SetSysClockTo72+0xf8>)
 8002362:	4b1b      	ldr	r3, [pc, #108]	; (80023d0 <SetSysClockTo72+0xf8>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800236a:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 800236c:	4a18      	ldr	r2, [pc, #96]	; (80023d0 <SetSysClockTo72+0xf8>)
 800236e:	4b18      	ldr	r3, [pc, #96]	; (80023d0 <SetSysClockTo72+0xf8>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002376:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8002378:	4a15      	ldr	r2, [pc, #84]	; (80023d0 <SetSysClockTo72+0xf8>)
 800237a:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <SetSysClockTo72+0xf8>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8002382:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002384:	4a12      	ldr	r2, [pc, #72]	; (80023d0 <SetSysClockTo72+0xf8>)
 8002386:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <SetSysClockTo72+0xf8>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800238e:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002390:	bf00      	nop
 8002392:	4b0f      	ldr	r3, [pc, #60]	; (80023d0 <SetSysClockTo72+0xf8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0f9      	beq.n	8002392 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800239e:	4a0c      	ldr	r2, [pc, #48]	; (80023d0 <SetSysClockTo72+0xf8>)
 80023a0:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <SetSysClockTo72+0xf8>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f023 0303 	bic.w	r3, r3, #3
 80023a8:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80023aa:	4a09      	ldr	r2, [pc, #36]	; (80023d0 <SetSysClockTo72+0xf8>)
 80023ac:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <SetSysClockTo72+0xf8>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f043 0302 	orr.w	r3, r3, #2
 80023b4:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80023b6:	bf00      	nop
 80023b8:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <SetSysClockTo72+0xf8>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 030c 	and.w	r3, r3, #12
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	d1f9      	bne.n	80023b8 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	40021000 	.word	0x40021000
 80023d4:	40022000 	.word	0x40022000

080023d8 <__libc_init_array>:
 80023d8:	b570      	push	{r4, r5, r6, lr}
 80023da:	2500      	movs	r5, #0
 80023dc:	4e0c      	ldr	r6, [pc, #48]	; (8002410 <__libc_init_array+0x38>)
 80023de:	4c0d      	ldr	r4, [pc, #52]	; (8002414 <__libc_init_array+0x3c>)
 80023e0:	1ba4      	subs	r4, r4, r6
 80023e2:	10a4      	asrs	r4, r4, #2
 80023e4:	42a5      	cmp	r5, r4
 80023e6:	d109      	bne.n	80023fc <__libc_init_array+0x24>
 80023e8:	f000 f87e 	bl	80024e8 <_init>
 80023ec:	2500      	movs	r5, #0
 80023ee:	4e0a      	ldr	r6, [pc, #40]	; (8002418 <__libc_init_array+0x40>)
 80023f0:	4c0a      	ldr	r4, [pc, #40]	; (800241c <__libc_init_array+0x44>)
 80023f2:	1ba4      	subs	r4, r4, r6
 80023f4:	10a4      	asrs	r4, r4, #2
 80023f6:	42a5      	cmp	r5, r4
 80023f8:	d105      	bne.n	8002406 <__libc_init_array+0x2e>
 80023fa:	bd70      	pop	{r4, r5, r6, pc}
 80023fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002400:	4798      	blx	r3
 8002402:	3501      	adds	r5, #1
 8002404:	e7ee      	b.n	80023e4 <__libc_init_array+0xc>
 8002406:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800240a:	4798      	blx	r3
 800240c:	3501      	adds	r5, #1
 800240e:	e7f2      	b.n	80023f6 <__libc_init_array+0x1e>
 8002410:	08002500 	.word	0x08002500
 8002414:	08002500 	.word	0x08002500
 8002418:	08002500 	.word	0x08002500
 800241c:	08002504 	.word	0x08002504

08002420 <memcmp>:
 8002420:	b510      	push	{r4, lr}
 8002422:	3901      	subs	r1, #1
 8002424:	4402      	add	r2, r0
 8002426:	4290      	cmp	r0, r2
 8002428:	d101      	bne.n	800242e <memcmp+0xe>
 800242a:	2000      	movs	r0, #0
 800242c:	bd10      	pop	{r4, pc}
 800242e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002432:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002436:	42a3      	cmp	r3, r4
 8002438:	d0f5      	beq.n	8002426 <memcmp+0x6>
 800243a:	1b18      	subs	r0, r3, r4
 800243c:	bd10      	pop	{r4, pc}

0800243e <memcpy>:
 800243e:	b510      	push	{r4, lr}
 8002440:	1e43      	subs	r3, r0, #1
 8002442:	440a      	add	r2, r1
 8002444:	4291      	cmp	r1, r2
 8002446:	d100      	bne.n	800244a <memcpy+0xc>
 8002448:	bd10      	pop	{r4, pc}
 800244a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800244e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002452:	e7f7      	b.n	8002444 <memcpy+0x6>

08002454 <memset>:
 8002454:	4603      	mov	r3, r0
 8002456:	4402      	add	r2, r0
 8002458:	4293      	cmp	r3, r2
 800245a:	d100      	bne.n	800245e <memset+0xa>
 800245c:	4770      	bx	lr
 800245e:	f803 1b01 	strb.w	r1, [r3], #1
 8002462:	e7f9      	b.n	8002458 <memset+0x4>

08002464 <strncpy>:
 8002464:	b570      	push	{r4, r5, r6, lr}
 8002466:	4604      	mov	r4, r0
 8002468:	b902      	cbnz	r2, 800246c <strncpy+0x8>
 800246a:	bd70      	pop	{r4, r5, r6, pc}
 800246c:	4623      	mov	r3, r4
 800246e:	f811 5b01 	ldrb.w	r5, [r1], #1
 8002472:	1e56      	subs	r6, r2, #1
 8002474:	f803 5b01 	strb.w	r5, [r3], #1
 8002478:	b91d      	cbnz	r5, 8002482 <strncpy+0x1e>
 800247a:	4414      	add	r4, r2
 800247c:	42a3      	cmp	r3, r4
 800247e:	d103      	bne.n	8002488 <strncpy+0x24>
 8002480:	bd70      	pop	{r4, r5, r6, pc}
 8002482:	461c      	mov	r4, r3
 8002484:	4632      	mov	r2, r6
 8002486:	e7ef      	b.n	8002468 <strncpy+0x4>
 8002488:	f803 5b01 	strb.w	r5, [r3], #1
 800248c:	e7f6      	b.n	800247c <strncpy+0x18>
 800248e:	0000      	movs	r0, r0
 8002490:	454c4449 	.word	0x454c4449
 8002494:	00000000 	.word	0x00000000
 8002498:	20726d54 	.word	0x20726d54
 800249c:	00637653 	.word	0x00637653
 80024a0:	6e69614d 	.word	0x6e69614d
 80024a4:	75657551 	.word	0x75657551
 80024a8:	00000065 	.word	0x00000065
 80024ac:	65764578 	.word	0x65764578
 80024b0:	6553746e 	.word	0x6553746e
 80024b4:	6870616d 	.word	0x6870616d
 80024b8:	0065726f 	.word	0x0065726f
 80024bc:	00007852 	.word	0x00007852
 80024c0:	00005854 	.word	0x00005854
 80024c4:	006d6553 	.word	0x006d6553
 80024c8:	5444454c 	.word	0x5444454c
 80024cc:	72656d69 	.word	0x72656d69
 80024d0:	00000000 	.word	0x00000000

080024d4 <ucExpectedStackBytes.6072>:
 80024d4:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
 80024e4:	a5a5a5a5                                ....

080024e8 <_init>:
 80024e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ea:	bf00      	nop
 80024ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ee:	bc08      	pop	{r3}
 80024f0:	469e      	mov	lr, r3
 80024f2:	4770      	bx	lr

080024f4 <_fini>:
 80024f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024f6:	bf00      	nop
 80024f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024fa:	bc08      	pop	{r3}
 80024fc:	469e      	mov	lr, r3
 80024fe:	4770      	bx	lr
