/*
******************************************************************************
File:     main.c
Info:     Generated by Atollic TrueSTUDIO(R) 9.0.0   2018-03-05

The MIT License (MIT)
Copyright (c) 2018 STMicroelectronics

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

******************************************************************************
*/

/* Includes */
#include <stddef.h>
#include "string.h"
#include "usr_usart.h"
#include "usr_can.h"
#include "stm32f4xx.h"
#include "printf.h"
#include "stm32f4xx_it.h"

/* Private macro */
/* Private variables */
 USART_InitTypeDef USART_InitStructure;

/* Private function prototypes */
 void RCC_Config();
 void NVIC_Configuration(void);
/* Private functions */

/**
**===========================================================================
**
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
	int i=0;
	SysTick_Init();
//	RCC_Config();
//	NVIC_Configuration();
	USART_Config();
	usr_CAN_Config();

	init_printf(NULL,putc);
	//set packet data
	usr_CAN_SetMessgFrame(&usr_CanTxMessage,
						0x0002,			//set identifier ID
						0x0000,			//set extended CAN identifier ID
						CAN_ID_STD,		//set standard CAN ID
						CAN_RTR_DATA,	//set data remote request
						8,				//set 8-byte data size
						usr_CanTxData);	// data buffer

  /* TODO - Add your application code here */
	printf("\nCAN testing start.\n");
  /* Infinite loop */
  while (1)
  {

//		usr_CAN_SendMessg(USR_CAN,&usr_CanTxMessage);
	  	usr_CAN_SendTexts(USR_CAN,&usr_CanTxMessage,"I'm your Master!");
//		usr_CAN_RecMessg(USR_CAN, &usr_CanRxMessage);
	  	usr_CAN_RecTexts(USR_CAN, &usr_CanRxMessage, usr_CanRxData, MAXRECBUFFER );
		Delay_ms(100);
//		usr_CAN_RecTexts(USR_CAN,&usr_CanRxMessage,usr_CanRxData,30);
//		printf("\nText: %s\n",usr_CanRxData);



  }
}



void NVIC_Configuration(void)
{
	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_SetPriorityGrouping(NVIC_PriorityGroup_4);
	/* Enable CAN1 RX0 interrupt IRQ channel */
	NVIC_InitStructure.NVIC_IRQChannel=CAN1_RX0_IRQn;
//	NVIC_InitStructure.NVIC_IRQChannel = CAN1_RX1_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);

}

void CAN1_RX0_IRQHandler(void)
{
//	uint8_t PendingMessage=0;
//	uint8_t dataLen=0;
//	uint8_t *pt=usr_CanRxData;
	if(CAN_GetITStatus(USR_CAN,CAN_IT_FMP0)!=RESET){
//				usr_CAN_RecMessg(USR_CAN, &usr_CanRxMessage);
				usr_CAN_RecTexts(USR_CAN, &usr_CanRxMessage, usr_CanRxData, MAXRECBUFFER );
				//clean FMP0 bits after reading data
				CAN_ClearITPendingBit(USR_CAN,CAN_IT_FMP0);
				}

}

