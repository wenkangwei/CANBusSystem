/*
******************************************************************************
File:     main.c
Info:     Generated by Atollic TrueSTUDIO(R) 9.0.0   2018-03-05

The MIT License (MIT)
Copyright (c) 2018 STMicroelectronics

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

******************************************************************************
*/

/* Includes */
#include <stddef.h>
#include "string.h"
#include "usr_usart.h"
#include "usr_can.h"
#include "stm32f10x.h"
#include "printf.h"
#include "stm32f1xx_it.h"

#define CAN_Text_Mode_Normal "Normal mode"
#define CAN_Text_Mode_LoopBack "Loopback mode"
#define CAN_Text_Mode_Silence "Silence mode"
/* Private macro */
enum {
	CAN_Normal=0,CAN_Loopback=2,CAN_Silent=1
}CAN_Mode;

/* Private variables */
 USART_InitTypeDef USART_InitStructure;
 int can_mode=0, mailbox=0;
uint8_t state=0;
 char *can_mode_text=CAN_Text_Mode_Normal;
/* Private function prototypes */



 void NVIC_Configuration(void);
/* Private functions */
 void GPIO_Config()
 {
	 GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);
	GPIO_InitStructure.GPIO_Mode=GPIO_Mode_IPD;
	GPIO_InitStructure.GPIO_Pin=GPIO_Pin_0;
	GPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);



 }



/**
**===========================================================================
**
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
	int i=0;

	SysTick_Init();
	GPIO_Config();
	NVIC_Configuration();
	USART_Config();
	init_printf(NULL,putc);
	usr_CAN_Config();


  /* TODO - Add your application code here */
	printf("\nCAN testing start.\n");
  /* Infinite loop */
	Delay_ms(10);
	while (1)
  {

	  if(GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_0)!=RESET){
		  //switch CAN mode
		  can_mode=(can_mode+1)%3;

		  if(can_mode ==CAN_Normal)
		  {
			  //Normal mode settings
			  if(CAN_OperatingModeRequest(CAN1,CAN_OperatingMode_Initialization)!=CAN_ModeStatus_Failed){
					CAN_InitStructure.CAN_Mode=CAN_Mode_Normal;
					usr_CanTxMessage.RTR=CAN_RTR_Data;// request data from slave
								if(CAN_Init(CAN1,&CAN_InitStructure)==CAN_InitStatus_Success){
									 printf("CAN mode : Normal \n");
									 can_mode_text=CAN_Text_Mode_Normal;
									 //reset received buffer
									 CAN_FIFORelease(USR_CAN,USR_FIFO);

								}

			  }
			  else{printf("CAN mode request fail\n");}

		  }
		  else if(can_mode==CAN_Loopback){
			  //Loop back mode settings
			if(CAN_OperatingModeRequest(CAN1,CAN_OperatingMode_Initialization)!=CAN_ModeStatus_Failed)
			{
				CAN_InitStructure.CAN_Mode=CAN_Mode_LoopBack;
				usr_CanTxMessage.RTR=CAN_RTR_Data;		//send data to test loop back mode
				if(CAN_Init(CAN1,&CAN_InitStructure)==CAN_InitStatus_Success){
				  printf("CAN mode : LoopBack \n");
				  can_mode_text=CAN_Text_Mode_LoopBack;
				  CAN_FIFORelease(USR_CAN,USR_FIFO);

				}
			}
			 else{printf("CAN mode request fail\n");}
		  }
		  else{
			  // Silence mode
		  			if(CAN_OperatingModeRequest(CAN1,CAN_OperatingMode_Initialization)!=CAN_ModeStatus_Failed)
		  			{
		  				CAN_InitStructure.CAN_Mode=CAN_Mode_Silent;
		  				usr_CanTxMessage.RTR=CAN_RTR_Remote;
		  				if(CAN_Init(CAN1,&CAN_InitStructure)==CAN_InitStatus_Success){
		  				  printf("CAN mode : Silence \n");
		  				can_mode_text=CAN_Text_Mode_Silence;
		  				 CAN_FIFORelease(USR_CAN,USR_FIFO);

		  				}
		  			}
		  			 else{printf("CAN mode request fail\n");}
		  		  }
	  }
	 Delay_ms(800);



  }
}



void NVIC_Configuration(void)
{
	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_SetPriorityGrouping(NVIC_PriorityGroup_4);
	/* Enable CAN1 RX0 interrupt IRQ channel */
	NVIC_InitStructure.NVIC_IRQChannel =USB_LP_CAN1_RX0_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);

	NVIC_InitStructure.NVIC_IRQChannel =USART1_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);

}



void USART1_IRQHandler()
{
	int i=0;

	if(USART_GetITStatus(USART1,USART_IT_RXNE)!=RESET)
	{
		USART_RECEIVEBUFFER(USART1, USART1_Rec_Buffer,Rec_BufferSize,1000);
		printf("\n-----------------USART Receive-------------\n %s\n", USART1_Rec_Buffer);
		printf("\n-------------------END-----------------------\n");

		memcpy((void *)usr_CanTxData, (void *)USART1_Rec_Buffer, MAXRECBUFFER);
		usr_CAN_SendTexts(USR_CAN,&usr_CanTxMessage,USART1_Rec_Buffer);
				printf("TX state: %d\n",state);
				Delay_ms(100);
		USART_ClearITPendingBit(USART1,USART_IT_RXNE);

	}

}


void USB_LP_CAN1_RX0_IRQHandler(void)
{

	int i=0,pendingMessg=0,j=0;
	if(CAN_GetITStatus(USR_CAN,CAN_IT_FMP0)!=RESET){

		pendingMessg= CAN_MessagePending(USR_CAN,USR_FIFO);
		printf("\n\n==================CAN Received Data===================\n");
		printf("CAN receive interrupt:%d\n",pendingMessg);
		for(j=0;j<pendingMessg;j++){
		CAN_Receive(USR_CAN,USR_FIFO,&usr_CanRxMessage);
		printf("remote STD: %d, RTR:%d  DLC:%d-------Mode: %s\n",usr_CanRxMessage.StdId, usr_CanRxMessage.RTR,usr_CanRxMessage.DLC,can_mode_text);

		//check if it is a data request
				//if it is not a request
				if(usr_CanRxMessage.RTR==CAN_RTR_DATA){
					for(i=0;i<8;i++)
					{
						printf("%d ",usr_CanRxMessage.Data[i]);
					}
					printf("\n");
					memcpy((void *)USART1_SD_Buffer, (void *)usr_CanRxMessage.Data, 8*sizeof(uint8_t));
					USART1_SD_Buffer[8]='\0';
					printf("Received String: %s\n",USART1_SD_Buffer);

		}
		else {
			//if it is in normal mode and received request, then send data


		}
		}
		printf("\n\n=======================END========================\n");
				CAN_ClearITPendingBit(USR_CAN,CAN_IT_FMP0);
	}

}

